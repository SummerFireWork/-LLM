arXiv:2308.07107v4 [cs.CL] 4 Sep 2024
Large Language Models for Information Retrieval: A Survey
Yutao Zhu, Huaying Yuan, Shuting Wang, Jiongnan Liu, Wenhan Liu, Chenlong Deng Haonan Chen, Zheng Liu, Zhicheng Dou, and Ji-Rong Wen
Abstract—As a primary means of information acquisition, information retrieval (IR) systems, such as search engines, have integrated themselves into our daily lives. These systems also serve as components of dialogue, question-answering, and recommender systems. The trajectory of IR has evolved dynamically from its origins in term-based methods to its integration with advanced neural models. While the neural models excel at capturing complex contextual signals and semantic nuances, thereby reshaping the IR landscape, they still face challenges such as data scarcity, interpretability, and the generation of contextually plausible yet potentially inaccurate responses. This evolution requires a combination of both traditional methods (such as term-based sparse retrieval methods with rapid response) and modern neural architectures (such as language models with powerful language understanding capacity). Meanwhile, the emergence of large language models (LLMs), typified by ChatGPT and GPT-4, has revolutionized natural language processing due to their remarkable language understanding, generation, generalization, and reasoning abilities. Consequently, recent research has sought to leverage LLMs to improve IR systems. Given the rapid evolution of this research trajectory, it is necessary to consolidate existing methodologies and provide nuanced insights through a comprehensive overview. In this survey, we delve into the confluence of LLMs and IR systems, including crucial aspects such as query rewriters, retrievers, rerankers, and readers. Additionally, we explore promising directions, such as search agents, within this expanding field.
Index Terms—Large Language Models; Information Retrieval; Query Rewriter; Reranking; Reader; Fine-tuning; Prompting
♦
1	Introduction
INFORMATION access is one of the fundamental daily needs of human beings. To fulfill the need for rapid acquisition of desired information, various information retrieval (IR) systems have been developed [1–4]. Prominent examples include search engines such as Google, Bing, and Baidu, which serve as IR systems on the Internet, adept at retrieving relevant web pages in response to user queries, and provide convenient and efficient access to information on the Internet. It is worth noting that IR extends beyond web page retrieval. In dialogue systems (chatbots) [1, 5– 8], such as Microsoft Xiaoice [2], Apple Siri,1 and Google Assistant,2 IR systems play a crucial role in retrieving appropriate responses to user input utterances, thereby producing natural and fluent human-machine conversations. Similarly, in question-answering systems [3, 9], IR systems are employed to select relevant clues essential for addressing user questions effectively. In image search engines [4], IR systems excel at returning images that align with user input queries. Given the exponential growth of information, research and industry have become increasingly interested in the development of effective IR systems.
The core function of an IR system is retrieval, which aims to determine the relevance between a user-issued query and the content to be retrieved, including various types of information such as texts, images, music, and more. For
All authors except Zheng Liu are from Gaoling School of Artificial Intelligence and School of Information, Renmin University of China. Zheng Liu is from Beijing Academy of Artificial Intelligence, China.
Contact e-mail: yutaozhu94@gmail.com, dou@ruc.edu.cn
1.	Apple Siri, https://www.apple.com/siri/
2.	Google Assistant, https://assistant.google.com/
the scope of this survey, we concentrate solely on review-
ing those text retrieval systems, in which query-document relevance is commonly measured by their matching score.3 Given that IR systems operate on extensive repositories, the efficiency of retrieval algorithms becomes of paramount importance. To improve the user experience, the retrieval performance is enhanced from both the upstream (query reformulation) and downstream (reranking and reading) perspectives. As an upstream technique, query reformulation is designed to refine user queries so that they are more effective at retrieving relevant documents [10, 11]. With the recent surge in the popularity of conversational search, this technique has received increasing attention. On the downstream side, reranking approaches are developed to further adjust the document ranking [12–14]. In contrast to the retrieval stage, reranking is performed only on a limited set of relevant documents, already retrieved by the retriever. Under this circumstance, the emphasis is placed on achieving higher performance rather than keeping higher efficiency, allowing for the application of more complex approaches in the reranking process. Additionally, reranking can accommodate other specific requirements, such as personalization [15–18] and diversification [19–22]. Following the retrieval and reranking stages, a reading component is incorporated to summarize the retrieved documents and deliver a concise document to users [23, 24]. While traditional IR systems typically require users to gather and organize relevant information themselves; however, the reading com-
3. The term “document” will henceforth refer to any text-based content subject to retrieve, including both long articles and short passages.
Traditional IR Components
Search Context
Candidate
Documents
Selected
Documents
Query1
Response1
Query2
Response2
(1)
Rewriter
___^____
Reranker
New Queries
Retriever
Large Language Models
ChatGPT	LLaMA Flan-T5 GLM BLOOM
___*___
Reader
Q Queryn
(2)
Search Agent
Response
Fig. 1. Overview of existing studies that apply LLMs into IR. (1) LLMs can be used to enhance traditional IR components, such as query rewriter, retriever, reranker, and reader. (2) LLMs can also be used as search agents to perform multiple IR tasks.
ponent is an integral part of new IR systems such as New Bing,4 improving users’ browsing experience and saving valuable time.
The trajectory of IR has traversed a dynamic evolution, transitioning from its origins in term-based methods to the integration of neural models. Initially, IR was anchored in term-based methods [25] and Boolean logic, focusing on keyword matching for document retrieval. The paradigm gradually shifted with the introduction of vector space models [26], unlocking the potential to capture nuanced semantic relationships between terms. This progression continued with statistical language models [27, 28], refining relevance estimation through contextual and probabilistic considerations. The influential BM25 algorithm [29] played an important role during this phase, revolutionizing relevance ranking by accounting for term frequency and document length variations. The most recent chapter in IR’s journey is marked by the ascendancy of neural models [3, 30– 32]. These models excel at capturing intricate contextual cues and semantic nuances, reshaping the landscape of IR. However, these neural models still face challenges such as data scarcity, interpretability, and the potential generation of plausible yet inaccurate responses. Thus, the evolution of IR continues to be a journey of balancing traditional strengths (such as the BM25 algorithm’s high efficiency) with the remarkable capability (such as semantic understanding) brought about by modern neural architectures.
Large language models (LLMs) have recently emerged as transformative forces across various research fields, such as natural language processing (NLP) [33–35], recommender systems [36–39], finance [40], and even molecule discovery [41]. These cutting-edge LLMs are primarily based on the Transformer architecture and undergo extensive pretraining on diverse textual sources, including web pages, research articles, books, and codes. As their scale continues to expand (including both model size and data volume), LLMs have demonstrated remarkable advances in their capabilities. On the one hand, LLMs have exhibited unprecedented proficiency in language understanding and generation, resulting in responses that are more human-like and better aligned with human intentions. On the other hand,
4. New Bing, https://www.bing.com/new
the larger LLMs have shown impressive emergent abilities when dealing with complex tasks [42], such as generalization and reasoning skills. Leveraging the impressive power of LLMs can undoubtedly improve the performance of IR systems. By incorporating these advanced language models, IR systems can provide users with more accurate responses, ultimately reshaping the landscape of information access and retrieval.
Initial efforts have been made to utilize the potential of LLMs in the development of novel IR systems. Notably, in terms of practical applications, New Bing is designed to improve the users’ experience of using search engines by extracting information from disparate web pages and condensing it into concise summaries that serve as responses to user-generated queries. In the research community, LLMs have proven useful within specific modules of IR systems (such as retrievers), thereby enhancing the overall performance of these systems. Due to the rapid evolution of LLM-enhanced IR systems, it is essential to comprehensively review their most recent advancements and challenges.
Our survey provides an insightful exploration of the intersection between LLMs and IR systems, covering key perspectives such as query rewriters, retrievers, rerankers, and readers (as shown in Figure 1).5 We also include some recent studies that leverage LLMs as search agents to perform various IR tasks. This analysis enhances our understanding of LLMs’ potential and limitations in advancing the IR field. For this survey, we create a Github repository by collecting the relevant papers and resources about applying LLMs for IR tasks (LLM4IR).6 We will continue to update the repository with newer papers. This survey will also be periodically updated according to the development of this area. We notice that there are several surveys for PLMs, LLMs, and their applications (e.g., AIGC or recommender systems) [43–49]. Compared with them, we focus on the techniques and methods for developing and applying LLMs for IR systems. In addition, we suggest reading the strategy
5.	As yet, there has not been a formal definition for LLMs. In this paper, we mainly focus on models with more than 1B parameters. We also notice that some methods do not rely on such strictly defined LLMs, but due to their representativeness, we still include an introduction to them in this survey.
6.	https://github.com/RUC-NLPIR/LLM4IR-Survey
report from the Chinese IR community [50], which discusses the opportunity and future directions of IR in the era of LLMs, and we think it is an excellent supplement to this survey.
The remaining part of this survey is organized as follows: Section 2 introduces the background for IR and LLMs. Section 3, 4, 5, 6 respectively review recent progress from the four perspectives of query rewriter, retriever, reranker, and reader, which are four key components of an IR system. Section 7 introduces recent studies of search agents. Then, Section 8 discusses some potential directions in future research. Finally, we conclude the survey in Section 9 by summarizing the major findings.
2	Background
2.1	Information Retrieval
Information retrieval (IR), as an essential branch of computer science, aims to efficiently retrieve information relevant to user queries from a large repository. Generally, users interact with an IR system by submitting their queries in textual form. Subsequently, IR systems undertake the task of matching and ranking these user-supplied queries against an indexed database, thereby facilitating the retrieval of the most pertinent results.
The field of IR has witnessed significant advancement with the emergence of various models over time. One such early model is the Boolean model, which employs Boolean logic operators to combine query terms and retrieve documents that satisfy specific conditions [25]. Based on the “bag-of-words” assumption, the vector space model [26] represents documents and queries as vectors in term-based space. Relevance estimation is then performed by assessing the lexical similarity between the query and document vectors. The efficiency of this model is further improved through the effective organization of text content using the inverted index. Moving towards more sophisticated approaches, statistical language models have been introduced to estimate the likelihood of term occurrences and incorporate context information, leading to more accurate and context-aware retrieval [27, 51]. In recent years, the neural IR paradigm has gained considerable attention in the research community [30, 52, 53]. By harnessing the powerful representation capabilities of neural networks, this paradigm can capture semantic relationships between queries and documents, thereby significantly enhancing retrieval performance.
Researchers have identified several challenges with implications for the performance and effectiveness of IR systems, such as query ambiguity and retrieval efficiency. In light of these challenges, researchers have directed their attention toward crucial modules within the retrieval process, aiming to address specific issues and effectuate corresponding enhancements. The pivotal role of these modules in ameliorating the IR pipeline and elevating system performance cannot be overstated. In this survey, we focus on the following four modules, which have been greatly enhanced by LLMs.
Query Rewriter is an essential IR module that seeks to improve the precision and expressiveness of user queries.
Positioned at the early stage of the IR pipeline, this module assumes the crucial role of refining or modifying the initial query to align more accurately with the user ’s information requirements. As an integral part of query rewriter, query expansion techniques, with pseudo relevance feedback being a prominent example, represent the mainstream approach to achieving query expression refinement. In addition to its utility in improving search effectiveness across general scenarios, the query rewriter finds application in diverse specialized retrieval contexts, such as personalized search and conversational search, thus further demonstrating its significance.
Retriever, as discussed here, is typically employed in the early stages of IR for document recall. The evolution of retrieval technologies reflects a constant pursuit of more effective and efficient methods to address the challenges posed by ever-growing text collections. In numerous experiments on IR systems over the years, the classical “bag-of-words” model BM25 [29] has demonstrated its robust performance and high efficiency. In the wake of the neural IR paradigm’s ascendancy, prevalent approaches have primarily revolved around projecting queries and documents into high-dimensional vector spaces, and subsequently computing their relevance scores through inner product calculations. This paradigmatic shift enables a more efficient understanding of query-document relationships, leveraging the power of vector representations to capture semantic similarities.
Reranker, as another crucial module in the retrieval pipeline, primarily focuses on fine-grained reordering of documents within the retrieved document set. Different from the retriever, which emphasizes the balance of efficiency and effectiveness, the reranker module places a greater emphasis on the quality of document ranking. In pursuit of enhancing the search result quality, researchers delve into more complex matching methods than the traditional vector inner product, thereby furnishing richer matching signals to the reranker. Moreover, the reranker facilitates the adoption of specialized ranking strategies tailored to meet distinct user requirements, such as personalized and diversified search results. By integrating domain-specific objectives, the reranker module can deliver tailored and purposeful search results, enhancing the overall user experience.
Reader has evolved as a crucial module with the rapid development of LLM technologies. Its ability to comprehend real-time user intent and generate dynamic responses based on the retrieved text has revolutionized the presentation of IR results. In comparison to presenting a list of candidate documents, the reader module organizes answer texts more intuitively, simulating the natural way humans access information. To enhance the credibility of generated responses, the integration of references into generated responses has been an effective technique of the reader module.
Furthermore, researchers explore unifying the above modules to develop a novel LLM-driven search model known as the Search Agent. The search agent is distinguished by its simulation of an automated search and result understanding process, which furnishes users with accurate
and readily comprehensible answers. WebGPT [24] serves as a pioneering work in this category, which models the search process as a sequence of actions of an LLM-based agent within a search engine environment, autonomously accomplishing the whole search pipeline. By integrating the existing search stack, search agents have the potential to become a new paradigm in future IR.
2.2	Large Language Models
Language models (LMs) are designed to understand or generate human language by taking into account the contextual information from word sequences. The evolution from statistical language models to neural language models makes it feasible to utilize LMs for representation learning beyond mere word sequence modeling. Peters et al. [54] first proposed to learn contextualized word representations through pre-training a bidirectional LSTM (biLSTM) network on large-scale corpora, followed by fine-tuning on specific downstream tasks. Similarly, Devlin et al. [55] proposed to pre-train a Transformer [56] encoder with a specially designed Masked Language Modeling (MLM) task and Next Sentence Prediction (NSP) task on large corpora. These studies initiated a new era of pre-trained language models (PLMs), with the “pre-training then fine-tuning” paradigm emerging as the prevailing learning approach. Along this line, numerous generative PLMs (e.g., GPT-2 [33], BART [57], and T5 [58]) have been developed for text generation problems including summarization, machine translation, and dialogue generation. Recently, researchers have observed that increasing the scale of PLMs (e.g., model size or data amount) can consistently improve their performance on downstream tasks (a phenomenon commonly referred to as the scaling law [59, 60]). Moreover, large-sized PLMs exhibit promising abilities (termed emergent abilities [42]) in addressing complex tasks, which are not evident in their smaller counterparts. Therefore, the research community refers to these large-sized PLMs as large language models (LLMs).
Owing to their vast number of parameters, fine-tuning LLMs for specific tasks, such as IR, is often deemed impractical. Consequently, two prevailing methods for applying LLMs have been established: in-context learning (ICL) and parameter-efficient fine-tuning. ICL is one of the emergent abilities of LLMs [34] empowering them to comprehend and furnish answers based on the provided input context, rather than relying merely on their pre-training knowledge. This method requires only the formulation of the task description and demonstrations in natural language, which are then fed as input to the LLM. Notably, parameter tuning is not required for ICL. Additionally, the efficacy of ICL can be further augmented through the adoption of chain-of-thought prompting, involving multiple demonstrations (describe the chain of thought examples) to guide the model’s reasoning process. ICL is the most commonly used method for applying LLMs to IR. Parameter-efficient fine-tuning [61–63] aims to reduce the number of trainable parameters while maintaining satisfactory performance. LoRA [61], for example, has been widely applied to open-source LLMs (e.g., LLaMA and BLOOM) for this purpose. Recently, QLoRA [64] has been proposed to further reduce memory usage by lever-
Fig. 2. An example of LLM-based query rewriter for ad-hoc search. The example is cited from the Query2Doc paper [65]. LLMs are used to generate a passage to supplement the original query, where N = 0 and N > 0 correspond to zero-shot and few-shot scenarios.
aging a frozen 4-bit quantized LLM for gradient computation. Despite the exploration of parameter-efficient finetuning for various NLP tasks, its implementation in IR tasks remains relatively limited, representing a potential avenue for future research.
3	Query Rewriter
Query rewriter, functioning as an essential preprocessing component for search engines, increases the accuracy of retrieval systems through the refinement of initial queries [66]. This mechanism, also known as query expansion or reformulation, holds a pivotal position in search engine operations. In the context of ad-hoc retrieval, the design of a query rewriter aims to mitigate the vocabulary mismatch problem by enriching original queries with semantically related terms. As conversational search evolves, query rewriters have evolved to interpret user intent and previous dialogues, thereby enabling context-sensitive queries. In this survey, the term “query rewriter ” is used to refer to any technique that improves retrieval performance through query modification.
Traditional query rewriting strategies primarily include techniques such as utilizing lexical knowledge bases [67– 71] and pseudo-relevance feedback [72–74]. However, these methods are limited due to the inadequate capabilities of knowledge models and the presence of noisy signals from coarse matching between the query and the top-k retrieved documents. LLMs, pretrained on vast datasets, demonstrate considerable advancements in the breadth of knowledge and language understanding, positioning them as an excellent resource for query rewriting tasks. In the subsequent sections, we provide a comprehensive review of recent research that applies LLMs to query rewriting.
3.1	Rewriting Scenarios
In the realm of IR, a query rewriter is primarily designed to serve two distinct scenarios: ad-hoc retrieval and con-
TABLE 1. Overview of existing LLM-based query rewriting methods. “Knowledge” denotes the source of information the method employs for query rewriting. “SFT” and “RL” denotes supervised fine-tuning and reinforcement learning, respectively. “Q”, “K”, and “A” refer to question, keyword, and answer-incorporated passages, respectively.
Scenario Knowledge		Approach	Format	Method
	LLMs	Prompting	A	HyDE [75]
	LLM	Prompting	A	Jagerman et al. [76]
	LLM	Prompting	A	Query2Doc [65]
	LLM	Prompting	A	Baek et al. [77]
	LLM	Prompting	Q	Alaofi et al. [78]
	LLM	Prompting	K	Li et al. [79]
	LLM	RL	K	Ma et al. [80]
Ad-hoc	LLM	SFT & RL	K	BEQUE [81]
	LLM + Corpora	Prompting	K	GRF+PRF [82]
	LLM + Corpora	Prompting	A	GRM [83]
	LLM + Corpora	Prompting	A	InteR [84]
	LLM + Corpora	Prompting	A	LameR [85]
	LLM + Corpora	Prompting	A	CSQE [86]
	LLM + Corpora	Prompting	Q	CAR [87]
	LLM + Corpora	SFT & RL	Q	RaFe [88]
C onvpr-onver	LLM	Prompting	Q	LLMCS [89]
sational	LLM	Prompting	Q	CONVERSER [90]
	LLM	Prompting	Q	Ye et al. [91]
versational search. Ad-hoc retrieval aims to bridge the semantic gap between a user ’s query and the potential documents. LLMs, with their extensive inherent knowledge, have proven effective in replacing traditional lexical knowledge databases [67–71].
For conversational search, query rewriters aim to refine a query within a conversation’s context, transforming it into isolated queries based on historical dialogues. A crucial requirement for conversational query rewriters is to address coreference resolution. Traditional query rewriting methods, trained on limited data, have shown suboptimal performance, as conversational search sessions tend to be diverse and long-tailed [92, 93]. This is particularly the case in more complex conversational search sessions. However, LLMs, with their robust context understanding capabilities, have demonstrated significant advantages in conversational query rewriting [89, 90].
By leveraging the capabilities of LLMs, researchers have been able to generate a variety of formats for rewritten queries, such as questions [78, 80, 88–91, 94], answer-incorporated passages [65, 75–77, 83–85, 87, 95], and keywords [80–82, 96]. Comprehensive details for each format are available in the following part.
3.2	Formats of Rewritten Queries
The intended format for rewritten queries can vary widely based on the specific needs and the downstream retrieval system. The ultimate goal is to improve the effectiveness of IR. Typically, the formats include questions, keywords, and answer-incorporated passages.
3.2.1	Questions
Rewriting original queries into similar form questions are a natural idea of query rewriting [78, 88, 91]. Query rewriters modify original queries to new questions to make it more precise, understandable, and aligned with the user ’s actual
Fig. 3. An example of LLM-based query rewriter for conversational search (cited from LLMCS [89]) . An LLM is used to generate a query and system response based on the demonstrations and previous search context. N = 0 and N > 0 correspond to zero-shot and few-shot scenarios respectively.
search intent. This can involve rephrasing, expanding, or simplifying the query. Recent research [78] has demonstrated the potential of using LLMs to generate query variants. Although these variants cannot cover the full range of human-generated ones, they do produce highly similar sets of relevant documents.
3.2.2	Keywords
Keywords serve as a high-level abstraction of the concepts contained within a query. Rewriting queries into keywords proves particularly effective when the downstream retriever is a sparse retriever. With specific instructions, LLMs can produce high-quality keywords or concepts for query rewriting [76, 80–82]. For example, BEQUE [81] formulates new queries as keywords for effective product searches, and Li et al. [79] introduce a two-round query rewriting process, which first generates a set of high-quality seed keywords, then utilizes these keywords to enhance the query.
3.2.3	Answer-incorporated Passages
The semantic gap between short-form queries and long-form documents has been a persistent challenge. The advent of LLMs with their inherent question-answering capabilities has introduced a novel approach to query rewriting. This approach involves initially utilizing LLMs to generate comprehensive answers to the given queries. These detailed answers are then employed to retrieve relevant passages from
TABLE 2. Examples of different prompting methods in query rewriter.
Methods	Prompts
Zero-shot	
HyDE [75] LameR [85]	Please write a passage to answer the question. Question: {#Question} Passage: Give a question {#Question} and its possible answering passages: A. {#Passage 1} B. {#Passage 2} C. {#Passage 3} ... Please write a correct answering passage.
Few-shot	
Query2Doc [65] Write a passage that answers the given query:
Query: {#Query 1}
Passage: {#Passage 1}
Query: {#Query} Passage:	
	Chain-of-Thought
CoT [76]	Answer the following query based on the context: Context: {#PRF doc 1} {#PRF doc 2} {#PRF doc 3} Query: {#Query} Give the rationale before answering
the corpus, thereby effectively bridging the semantic divide between short queries and long candidate documents. The prompt employed for this mechanism is typically structured as follows: “Given a question query and its potential answer passages passages, compose a passage that provides an answer to the question” [84, 85]. This approach enables a more nuanced and contextually relevant retrieval of information, enhancing the overall effectiveness of the query rewriting process [65, 75–77, 83–85].
3.3	Approaches
The utilization of LLMs in query rewriting can be categorized into three primary methodologies: prompting, supervised fine-tuning, and reinforcement learning. The prompting approaches employ specific prompts to guide the LLM’s output, providing flexibility and interpretability. The supervised fine-tuning techniques adapt pre-trained LLMs to the specific task of query rewriting. However, the scarcity of training data for query rewriting often poses a challenge. To address this issue, reinforcement learning methods utilize feedback from downstream applications, thereby improving the performance of query rewriters. In the following section, we will introduce these three methods in detail.
3.3.1	Prompting
Prompting in LLMs refers to the technique of providing a specific instruction or context to guide the model’s generation of text. The prompt serves as a conditioning signal and influences the language generation process of the model. Existing prompting strategies can be roughly categorized into three groups: zero-shot prompting, few-shot prompting, and chain-of-thought (CoT) prompting [97].
•	Zero-shot prompting. Zero-shot prompting involves instructing the model to generate texts on a specific topic without any prior exposure to training examples in that domain or topic. The model relies on its pre-existing knowledge and language understanding to generate coherent and
contextually relevant expanded terms for original queries. Experiments show that zero-shot prompting is a simple yet effective method for query rewriter [76, 78, 82, 84, 85, 98].
•	Few-shot prompting. Few-shot prompting, also known as in-context learning, involves providing the model with a limited set of examples or demonstrations related to the desired task or domain [65, 76, 78, 98]. These examples serve as a form of explicit instruction, allowing the model to adapt its language generation to specific tasks or domains. Query2Doc [65] prompts LLMs to write a document that answers the query with some demo query-document pairs provided by the ranking dataset, such as MSMARCO [99] and NQ [100]. This work experiments with a single prompt. To further study the impact of different prompt designing, recent works [76] have explored eight different prompts, such as prompting LLMs to generate query expansion terms instead of entire pseudo documents and CoT prompting. Some illustrative prompts are shown in Table 2. The experiments validate that Query2Doc is more effective than many other prompt-based methods.
•	Chain-of-thought prompting. CoT prompting [97] is a strategy that involves iterative prompting, where the model is provided with a sequence of instructions or partial outputs [76, 78]. In conversational search, the process of query rewriting is multi-turn, which means queries should be refined step-by-step with the interaction between search engines and users. This process naturally coincides with the CoT process. As shown in Figure 3, users can conduct the CoT process by adding some instructions during each turn, such as “Based on all previous turns, xxx”. While in ad-hoc search, there is only one round in query rewriting, so CoT could only be accomplished in a simple and coarse way. For example, as shown in Table 2, researchers add “Give the rationale before answering” in the instructions to prompt LLMs to think deeply [76].
3.3.2	Supervised Fine-tuning
Prompting methods directly leverage LLMs’ strong capabilities to expand or rewrite queries. Though prompting method is effective, LLMs are not naturally designed for query rewriting task. To further tailor LLMs for this task, supervised fine-tuning (SFT) has emerged as a promising approach. A crucial aspect of this methodology is the creation of an appropriate training dataset. The process of gathering this dataset varies significantly depending on the application scenario.
In the context of e-commerce search, a wealth of supervised training data for query rewriting is naturally available. This data, sourced from the previous-generation rewriting policies of the e-commerce system, significantly simplifies the construction of the SFT dataset [81].
Conversely, in an ad-hoc retrieval scenario, the acquisition of query rewrite training data is often a challenge. To address this issue, researchers usually employ implicit feedback and reinforcement learning to train the query rewriter.
3.3.3	Reinforcement Learning
Query rewriters typically serve as intermediaries for retrieval systems, implying that they do not operate independently, and there is no specific loss attributed solely to the
query rewriting process. In such a context, Reinforcement Learning (RL) presents an alternative training mechanism for the query rewriter. Query rewriters can receive feedback signals from ranking models [88] or downstream LLM readers [80]. For instance, ranking scores can be utilized to construct good-bad pairs for DPO [101] training. Ma et al. [80] proposed a method that first generates answers from LLMs and then uses the QA evaluation results as training signals. In a similar manner, BEQUE [81] introduced an offline feedback system capable of providing a quality score for each query based on the set of products it retrieved. Such an application of Reinforcement Learning mechanisms aligns the objective of query rewriters more closely with the goals of downstream tasks, thereby enhancing the overall performance of the system.
3.4	Limitations
Despite the potential of LLMs in query rewriting, they still suffer from several limitations. We discuss two primary challenges that arise with their use in this context.
3.4.1	Concept Drifts
One significant issue is the introduction of unrelated information, or concept drift, which may occur due to the LLM’s vast knowledge base and propensity to generate detailed yet sometimes redundant content. While this can potentially enrich the query, it may also lead to irrelevant or off-target results. This issue has been reported in various studies [81, 87, 94]. These works emphasize the necessity for a balanced approach to LLM-based query rewriting, maintaining the core and focus of the original query while utilizing the LLM’s capabilities to enhance and clarify it. This balance is critical for effective search and IR applications.
3.4.2	Correlation between Retrieval Performance and Expansion Effects
A recent comprehensive study [102] has investigated various expansion techniques and downstream ranking models, revealing a significant negative correlation between retrieval performance and expansion benefits. Specifically, expansion tends to improve the scores of weaker models but adversely affects stronger ones. This finding suggests a strategic approach: only using expansions with weaker models or when the target dataset significantly varies in format from the training corpus. In other situations, it may be more beneficial to refrain from expansions to preserve the clarity of the relevance signal.
4	Retriever
In an IR system, the retriever serves as the first-pass document filter to collect broadly relevant documents for user queries. Given the enormous amounts of documents in an IR system, the retriever ’s efficiency in locating relevant documents is essential for maintaining search engine performance. Meanwhile, a high recall is also important for the retriever, as the retrieved documents are then fed into the ranker to generate final results for users, which determines the ranking quality of search engines.
In recent years, retrieval models have shifted from relying on statistic algorithms [29] to neural models [3, 31]. The latter approaches exhibit superior semantic capability and excel at understanding complicated user intent. The success of neural retrievers relies on two key factors: data and model. From the data perspective, a large amount of high-quality training data is essential. This enables retrievers to acquire comprehensive knowledge and accurate matching patterns. Furthermore, the intrinsic quality of search data, i.e., issued queries and document corpus, significantly influences retrieval performance. From the model perspective, a strongly representational neural architecture allows retrievers to effectively store and apply knowledge obtained from the training data.
Unfortunately, there are some long-term challenges that hinder the advancement of retrieval models. First, user queries are usually short and ambiguous, making it difficult to precisely understand the user’s search intents for retrievers. Second, documents typically contain lengthy content and substantial noise, posing challenges in encoding long documents and extracting relevant information for retrieval models. Additionally, the collection of human-annotated relevance labels is time-consuming and costly. It restricts the retrievers’ knowledge boundaries and their ability to generalize across different application domains. Moreover, existing model architectures, primarily built on BERT [55], exhibit inherent limitations, thereby constraining the performance potential of retrievers. Recently, LLMs have exhibited extraordinary abilities in language understanding, text generation, and reasoning. This has motivated researchers to use these abilities to tackle the aforementioned challenges and aid in developing superior retrieval models. Roughly, these studies can be categorized into two groups: (1) leveraging LLMs to generate search data, and (2) employing LLMs to enhance model architecture.
4.1	Leveraging LLMs to Generate Search Data
In light of the quality and quantity of search data, there are two prevalent perspectives on how to improve retrieval performance via LLMs. The first perspective revolves around search data refinement methods, which concentrate on reformulating input queries to precisely present user intents. The second perspective involves training data augmentation methods, which leverage LLMs’ generation ability to enlarge the training data for dense retrieval models, particularly in zero- or few-shot scenarios.
4.1.1	Search Data Refinement
Typically, input queries consist of short sentences or keyword-based phrases that may be ambiguous and contain multiple possible user intents. Accurately determining the specific user intent is essential in such cases. Moreover, documents usually contain redundant or noisy information, which poses a challenge for retrievers to extract relevance signals between queries and documents. Leveraging the strong text understanding and generation capabilities of LLMs offers a promising solution to these challenges. As yet, research efforts in this domain primarily concentrate on employing LLMs as query rewriters, aiming to refine input queries for more precise expressions of the user’s search
intent. Section 3 has provided a comprehensive overview of these studies, so this section refrains from further elaboration. In addition to query rewriter, an intriguing avenue for exploration involves using LLMs to enhance the effectiveness of retrieval by refining lengthy documents. This intriguing area remains open for further investigation and advancement.
4.1.2	Training Data Augmentation
Due to the expensive economic and time costs of human-annotated labels, a common problem in training neural retrieval models is the lack of training data. Fortunately, the excellent capability of LLMs in text generation offers a potential solution. A key research focus lies in devising strategies to leverage LLMs’ capabilities to generate pseudorelevant signals and augment the training dataset for the retrieval task.
Why do we need data augmentation? Previous studies of neural retrieval models focused on supervised learning, namely training retrieval models using labeled data from specific domains. For example, MS MARCO [99] provides a vast repository, containing a million passages, more than 200,000 documents, and 100,000 queries with human-annotated relevance labels, which has greatly facilitated the development of supervised retrieval models. However, this paradigm inherently constrains the retriever ’s generalization ability for out-of-distribution data from other domains. The application spectrum of retrieval models varies from natural question-answering to biomedical IR, and it is expensive to annotate relevance labels for data from different domains. As a result, there is an emerging need for zero-shot and few-shot learning models to address this problem [113]. A common practice to improve the models’ effectiveness in a target domain without adequate label signals is through data augmentation.
How to apply LLMs for data augmentation? In the scenario of IR, it is easy to collect numerous documents. However, the challenging and costly task lies in gathering real user queries and labeling the relevant documents accordingly. Considering the strong text generation capability of LLMs, many researchers [103, 105] suggest using LLM-driven processes to create pseudo queries or relevance labels based on existing collections. These approaches facilitate the construction of relevant query-document pairs, enlarging the training data for retrieval models. According to the type of generated data, there are three mainstream approaches that complement the LLM-based data augmentation for retrieval models, i.e., pseudo query generation, relevance label generation, and complete example generation. Their frameworks are visualized in Figure 4.
•	Pseudo query generation. Given the abundance of documents, a straightforward idea is to use LLMs for generating their corresponding pseudo queries. One such illustration is presented by inPairs [103], which leverages the in-context learning capability of GPT-3. This method employs a collection of query-document pairs as demonstrations. These pairs are combined with a document and presented as input to GPT-3, which subsequently generates possible relevant queries for the given document. By combining the same demonstration with various documents, it is easy to create a
vast pool of synthetic training samples and support the finetuning of retrievers on specific target domains. To enhance the diversity of generated examples, Gecko [110] prompts LLMs to first generate a task description, and then generate pseudo queries according to the task. Considering the false negative problems, it further develops an LLM-based positive and negative mining strategy to discover potential relevant and hard negative documents from the corpus for generated queries, which significantly enhance the retrieval performance. Recent studies [104] have also leveraged open-sourced LLMs, such as Alpaca-LLaMA and tk-Instruct, to produce sufficient pseudo queries and applied curriculum learning to pre-train dense retrievers. To enhance the reliability of these synthetic samples, a fine-tuned model (e.g., a monoT5-3B model fine-tuned on MSMARCO [105]) is employed to filter the generated queries. Only the top pairs with the highest estimated relevance scores are kept for training. This “generating-then-filtering” paradigm can be conducted iteratively in a round-trip filtering manner, i.e., by first fine-tuning a retriever on the generated samples and then filtering the generated samples using this retriever. Repeating these EM-like steps until convergence can produce high-quality training sets [106]. Furthermore, by adjusting the prompt given to LLMs, they can generate queries of different types. This capability allows for a more accurate simulation of real queries with various patterns [107].
In practice, it is costly to generate a substantial number of pseudo queries through LLMs. Balancing the generation costs and the quality of generated samples has become an urgent problem. To tackle this, UDAPDR [108] is proposed, which first produces a limited set of synthetic queries using LLMs for the target domain. These high-quality examples are subsequently used as prompts for a smaller model to generate a large number of queries, thereby constructing the training set for that specific domain. It is worth noting that the aforementioned studies primarily rely on fixed LLMs with frozen parameters. Empirically, optimizing LLMs’ parameters can significantly improve their performance on downstream tasks. Unfortunately, this pursuit is impeded by the prohibitively high demand for computational resources. To overcome this obstacle, SPTAR [109] introduces a soft prompt tuning technique that only optimizes the prompts’ embedding layer during the training process. This approach allows LLMs to better adapt to the task of generating pseudo-queries, striking a favorable balance between training cost and generation quality.
In addition to the above studies, pseudo query generation methods are also introduced in other application scenarios, such as conversational dense retrieval [90] and multilingual dense retrieval [114].
•	Relevance label generation. In some downstream tasks of retrieval, such as question-answering, the collection of questions is also sufficient. However, the relevance labels connecting these questions with the passages of supporting evidence are very limited. In this context, leveraging the capability of LLMs for relevance label generation is a promising approach that can augment the training corpus for retrievers. A recent method, ART [111], exemplifies this approach. It first retrieves the top-relevant passages for each question. Then, it employs an LLM to produce the generation probabilities of the question conditioned on these top
Few-shot prompt
Example 1:
Document: …If you are pregnant, limit caffeine to 200 milligrams each day. This is about the amount in 1½ 8-ou nce cups of coffee or one 12-ounce cup of coffee. Relevant Query: Is a little caffeine ok during pregnancy?
Example N:
Document: Passiflora herbertiana. A rare passion fruit native to Australia...
Relevant Query: What fruit is native to Australia?
Example N +1:
Document: {#Document}
Relevant Query:
Zero-shot prompt
Write a Question answered by the given passage.
Passage: {#Passage}
Query:
Brainstorm prompt
Brainstorm a list of potentially useful text retrieval tasks. Please adhere to the following guidelines: - Specify what the query is, and what the desired documents are.
-	Each retrieval task should cover a wide range of queries, and should not be too specific.
Your output should always be a Python list of strings only, with about 20 elements, and each element corresponds to a distinct retrieval task in one sentence. Do not explain yourself or output anything else. Be creative!
Example 1:
Provided a scientific claim as query, retrieve documents that help verify or refute the claim. ?
Example N:
Search for documents that answer a FAQ-style query on children's nutrition.
(a) Framework of pseudo query generation
Generation prompt
(2) Framework of relevance label generation
You have been assigned a retrieval task: {#Task}
Your mission is to write one text retrieval example for this task in JSON format. The JSON object must contain the following keys:
-	"user_query": a string, a random user sea rch query specified by the retrieval task.
-	"positive_document": a string, a relevant document for the user query.
-	"hard_negative_document": a string, a ha rd negative document that only a ppears relevant to the query.
Please adhere to the following guidelines:
-	The "user_q uery" should be {#Query_type}, {#Query_length}, {#Clarity}, and diverse in topic.
-	All documents should be at least {#Num_words} words long.
-	Both the query and documents should be in {#Language}.
Your output must always be a JSON object only, do not explain yourself or output anything else. Be creative!
(3) Framework of complete example generation
Fig. 4. Three typical frameworks for LLM-based data augmentation in the retrieval task (right), along with their prompt examples (left). Note that the methods of relevance label generation do not treat questions as inputs but regard their generation probabilities conditioned on the retrieved passages as soft relevance labels.
passages. After a normalization process, these probabilities serve as soft relevance labels for the training of the retriever.
• Complete example generation. Recent study [112] further investigates approaches to directly utilize LLMs to generate synthetic queries and documents, hence providing tremendous diverse training examples across varied tasks and languages. This work proposes a two-stage generation pipeline, where the first stage prompts the LLM to brainstorm various retrieval tasks, and then the second stage generates corresponding “(query, positive document, negative document)” triplets to build synthetic training data. Researchers further control the length, languages, and semantic relationships of queries and documents to produce diverse training samples. The generated triplets, after post-processing, e.g., deduplication and JSON-format filtering, are used as training examples for optimizing dense retrievers.
Additionally, to highlight the similarities and differences among the corresponding methods, we present a comparative result in Table 3. It compares the aforementioned methods from various perspectives, including the number of examples, the generator employed, the type of synthetic data produced, the method applied to filter synthetic data, and whether LLMs are fine-tuned. This table serves to facilitate a clearer understanding of the landscape of these
methods.
4.2 Leveraging LLMs as Retrievers’ Backbone
Thanks to the superior text representation capability, LLMs excel at comprehending the underlying semantics of queries and documents. Therefore, it becomes increasingly popular to apply such large-scale models as the backbone of text retrievers, leading to substantial improvements over the conventional methods based on smaller-sized models [55].
4.2.1	Dense Retriever
The application of LLMs brings about two major impacts on dense retrieval. On one hand, it advances the ongoing progress of the existing methods, making substantial improvements in terms of both in-domain accuracy and out-of-domain generalizability. On the other hand, it extends the boundaries of current methods, introducing new capabilities such as instruction following and in-context learning.
Improved Existing Capacities. Dense retrieval needs to fine-tune pre-trained text encoders such that queries and documents can be transformed into semantic-rich embeddings. Therefore, the downstream retrieval performance can benefit from the utilization of stronger foundations. With
TABLE 3. The comparison of existing data augmentation methods powered by LLMs for training retrieval models.
Methods	# Examples	Generator	Synthetic Data	Filter Method	LLMs’ tuning
InPairs [103]	3	Curie	Relevant query	Generation probability	Fixed
Ma et al. [104]	0-2	Alpaca-LLaMA & tk-Instruct	Relevant query	-	Fixed
InPairs-v2 [105]	3	GPT-J	Relevant query	Relevance score from fine-tuned monoT5-3B	Fixed
PROMPTAGATOR [106]	0-8	FLAN	Relevant query	Round-trip filtering	Fixed
TQGen [107]	0	T0	Relevant query	Generation probability	Fixed
UDAPDR [108]	0-3	GPT3 & FLAN-T5-XXL	Relevant query	Round-trip filtering	Fixed
SPTAR [109]	1-2	LLaMA-7B & Vicuna-7B	Relevant query	BM25 filtering	Soft Prompt tuning
Gecko [110]	few-shot	Unkown	Relevant query	-	Fixed
ART [111]	0	T5-XL & T5-XXL	Soft relevance labels	-	Fixed
Wang et al. [112]	2	GPT-4	Q-PosD-NegD triplet	-	fixed
preliminary progresses achieved by early forms of pretrained models (e.g., BERT [55] and T5 [58]), people moved on to take advantage of LLMs for dense retrieval. In this direction, a pioneer work is made by OpenAI, where a series of GPT models were fine-tuned towards text and code representation [115]. It is the first time where decoding-only transformers were effectively applied for dense retrieval. Importantly, it empirically validates that the retrieval performance can be consistently improved from the increased model size and embedding dimension. Besides, the LLM-based retrievers also exhibit superior generalizability [116, 117], as notable improvements can be achieved for not only the targeted scenario but also a variety of general tasks beyond the fine-tuned domain.
Recently, the development of LLM-based dense retrievers have gotten dramatically promoted as powerful LLMs, e.g., LLaMA [35], Vicuna [118], Mistral [119], Phi [120], and Gemma [121], are made publicly available. Remarkably, RepLLaMA [122], the first fine-tuned embedder on top of open-source LLM (LLaMA-2-7B), brings forth major improvements on a variety of benchmarks, including MSMARCO passage/doc retrieval [99] and BEIR [113]. Despite extra computation costs due to the expanded model scale, the first-stage retrieval accuracy with RepLLaMA alone already surpasses the multi-stage retrieval accuracy resulted from conventional methods, indicating the its potential value for real-world application. After that, people make exploration of other alternatives for dense retrieval, where additional improvements are continually achieved with adoption of more advanced LLMs [112, 123, 124]. To date, LLM-based embedders have dominated all major text retrieval benchmarks, e.g., currently, the leading methods on MTEB [125] are all back-ended by LLMs.
In addition to the above methods which directly finetune LLMs, there are also parallel works on adapting generic LLMs as better foundations for dense retrieval. For example, Llama2Vec [126] performs post pre-training of LLaMA-2 with two new pretext tasks: EBAE (embedding based autoencoding) and EBAR (embedding based auto-regression). With moderate scale of training on unlabeled corpus, it results in substantial improvements of retrieval performance over the basic Llama-2 model. Besides, NV-Embed modifies LLM’s architecture by introducing latent attention layer and bidirectional attention [127]. Both modifications contribute to the improved performance on MTEB benchmark. Despite the above preliminary progresses, there are still many open challenges about LLM-based embedders, such as efficiency
and adaptability, which need to be addressed in the future.
Introducing New Capacities. Compared to conventional methods that use small-scale pre-trained models, LLM-based embedders introduce new capabilities that enhance the usability and accuracy of dense retrieval. One notable example is their ability to follow instructions, allowing LLM-based embedders to be trained for various semantic matching tasks based on user demands. For instance, an LLM-based embedder can perform document retrieval when prompted with “retrieve relevant docs for the input question”, and can be adapted for duplicate question retrieval with the prompt “retrieve questions with the same meaning as input”. Although BERT-based retrievers are also fine-tuned to follow instructions [128, 129], they do not support unseen instructions as effectively as LLM-based embedders [130]. ChatRetriever [131] further leverages dialog-based instruction tuning to build LLM-based conversational embedders, enhancing their conversational retrieval capabilities. In addition to instructions, the LLM-based embedders can also be adapted through in-context learning, where the retrieval function can be updated by demonstration examples of user’s interested tasks [132]. Another advantage of LLM-based embedders is their length-generalizable capacity, which allows them to effectively handle much longer texts than those in their training examples [130]. This makes it possible to manage retrieval applications across various text lengths while maintaining a feasible training cost.
4.2.2	Generative Retriever
Traditional IR systems typically follow the “index-retrieval-rank” paradigm to locate relevant documents based on user queries. Though, this approach has proven its effective in practice, it usually consist of three separate modules: the index module, the retrieval module, and the reranking module. Optimizing these modules collectively can be challenging, potentially resulting in sub-optimal retrieval outcomes. Additionally, this paradigm demands additional storage space for pre-built indexes, further burdening storage resources. Recently, generative model-based retrieval methods [133–135] have emerged to address these challenges. These methods move away from the traditional “indexretrieval-rank” paradigm and instead use a unified model to directly generate document identifiers (i.e., DocIDs) relevant to the queries. In these generative retrieval methods, the knowledge of the document corpus is stored in the model parameters, eliminating the need for additional storage space for a separate index. Existing works have investigated
the approaches of generating document identifiers through fine-tuning and prompting of LLMs [136, 137]
Fine-tuning LLMs. Given the vast amount of world knowledge contained in LLMs, it is intuitive to leverage them to build generative retrievers. DSI [136] is a typical method that fine-tunes the pre-trained T5 models on retrieval datasets. The approach involves encoding queries and decoding document identifiers directly to perform retrieval. They explore multiple techniques for generating document identifiers and find that constructing semantically structured identifiers yields optimal results. In this strategy, DSI applies hierarchical clustering to group documents according to their semantic embeddings and assigns a semantic DocID to each document based on its hierarchical group. To ensure the output DocIDs are valid and do represent actual documents in the corpus, DSI constructs a trie using all DocIDs and utilizes a constraint beam search during the decoding process. Furthermore, this approach observes that the scaling law, which suggests that larger LMs lead to improved performance, is also applied to generative retrievers. Though various generative retrievers have been proposed [136, 138, 139], most of them mainly focus on fine-tuning size-limited LMs on small-size document corpus (usually a subset of MSMARCO [99]). To analyze how the model size and document-corpus size impact the effectiveness of generative retrievers, Pradeep et al. [140] conducted a comprehensive analysis by scaling up corpus size from 100k to 8.8M and scaling model size up to 11B (T5-XXL). The primary findings are three-fold: (1) It is still challenging for generative retrievers to cover large-scale document corpus. (2) More model parameters often bring better performance. (3) Introducing synthetic queries generated from documents to expand training samples could significantly enhance the retrieval performance.
CorpusLM [141] further explores combining the retrieval and answering tasks together based on LLMs, making the two mutually reinforcing. Researchers devise various training tasks, e.g., DocID list generation, closed-book answers generation, and RAG generation, to sufficiently leverage and enhance the world knowledge of LLMs, improving the performance of these generation tasks.
Prompting LLMs. In addition to fine-tuning LLMs for retrieval, it has been found that LLMs (e.g., GPT-series models) can directly generate relevant web URLs for user queries with a few in-context demonstrations [137]. This unique capability of LLMs is believed to arise from their training exposure to various HTML resources. As a result, LLMs can naturally serve as generative retrievers that directly generate document identifiers to retrieve relevant documents for input queries. To achieve this, an LLM-URL [137] model is proposed. It utilizes the GPT-3 text-davinci-003 model to yield candidate URLs. Furthermore, it designs regular expressions to extract valid URLs from these candidates to locate the retrieved documents.
To provide a comprehensive understanding of this topic, Table 4 summarizes the common and unique characteristics of the LLM-based retrievers discussed above.
TABLE 4. The comparison of retrievers that leverage LLMs as the foundation. “KD” is short for “Knowledge Distillation”.
Methods	Backbone	Architecture	LLM’s tuning
cpt-text [115]	GPT-series	Dense	Pre-training & Fine-tuning
GTR [116]	T5	Dense	Pre-training & Fine-tuning
RepLLaMA [122]	LLAMA	Dense	Fine-tuning
TART-full [129]	T0 & Flan-T5	Dense	Fine-tuning & Prompting
TART-dual [129]	Contriever	Dense	KD & Prompting
DSI [136]	T5	Generative	Fine-tuning
LLM-URL [137]	GPT-3	Generative	Prompting
CorpusLM [141]	T5-base & Llama2-7B-Chat	Generative	Fine-tuning
4.3 Limitations
Though some efforts have been made for LLM-augmented retrieval, there are still many areas that require more detailed investigation. For example, a critical requirement for retrievers is fast response, while the main problem of existing LLMs is the huge model parameters and overlong inference time. Addressing this limitation of LLMs to ensure the response time of retrievers is a critical task. Moreover, even when employing LLMs to augment datasets (a context with lower inference time demands), the potential mismatch between LLM-generated texts and real user queries could impact retrieval effectiveness. Furthermore, as LLMs usually lack domain-specific knowledge, they need to be finetuned on task-specific datasets before applying them to downstream tasks. Therefore, developing efficient strategies to fine-tune these LLMs with numerous parameters emerges as a key concern.
5 Reranker
Reranker, as the second-pass document filter in IR, aims to rerank a document list retrieved by the retriever (e.g., BM25) based on the query-document relevance. According to the usage of LLMs, existing LLM-based reranking methods can be divided into three paradigms: utilizing LLMs as supervised rerankers, utilizing LLMs as unsupervised rerankers, and utilizing LLMs for training data augmentation. These paradigms are summarized in Table 5 and will be introduced in the following sections. Recall that we will use the term document to refer to the text retrieved in general IR scenarios, including instances such as passages (e.g., passages in MS MARCO passage ranking dataset [99]).
5.1	Utilizing LLMs as Supervised Rerankers
Supervised fine-tuning is an important step in applying pre-trained LLMs to a reranking task. Due to the lack of awareness of ranking during pre-training, LLMs cannot appropriately measure the query-document relevance and fully understand the reranking tasks. By fine-tuning LLMs on task-specific ranking datasets, such as the MS MARCO passage ranking dataset [99], which includes signals of both relevance and irrelevance, LLMs can adjust their parameters to yield better performance in the reranking tasks. Based on
TABLE 5. Summary of existing LLM-based re-ranking methods. “Enc” and “Dec” denote encoder and decoder, respectively.
Paradigm	Type	Method
Supervised Rerankers	Enc-only	monoBERT [12]
	Enc-dec	monoT5[13], Ju et al. [142], DuoT5 [143], RankT5 [144], ListT5 [145] RankLLaMA [122], TSARankLLM [146],
		
	Dec-only	Q-PEFT [147], Zhang et al. [148], PE-Rank [149]
		Liang et al. [150], Zhuang et al. [151], Guo et al. [152], Sachan et al. [153],
Unsupervised Rerankers	Pointwise	Zhuang et al. [154], Sun et al. [155], Co-Prompt [156], DemoRank [157], PARADE [158] RankGPT [159], Ma et al. [160],
	Listwise	Tang et al. [161], TourRank [162], Parry et al. [163]
	Pairwise	PRP [164], Zhuang et al. [165], PRP-Graph [166], Yan et al. [167]
Data		ExaRanker [168], ExaRanker-Open [169], InPars-Light [170], Askari et al. [171],
		Askari et al. [172], RankVicuna [173],
Augmentation		RankZephyr [174], Sun et al. [175]
the backbone model structure, we can categorize existing supervised rerankers as: (1) encoder-only, (2) encoder-decoder, and (3) decoder-only.
5.1.1	Encoder-only
The encoder-based rerankers represent a significant turning point in applying LLMs to document ranking tasks. They demonstrate how some pre-trained language models (e.g., BERT [55]) can be fine-tuned to deliver highly accurate relevance predictions. A representative approach is monoBERT [12], which transforms a query-document pair into a sequence “[CLS] query [SEP] document [SEP]” as the model input and calculates the relevance score by feeding the “[CLS]” representation into a linear layer. The reranking model is optimized based on the cross-entropy loss.
5.1.2	Encoder-Decoder
In this field, existing studies mainly formulate document ranking as a generation task and optimize an encoderdecoder-based reranking model [13, 142–144]. Specifically, given the query and the document, reranking models are usually fine-tuned to generate a single token, such as “true” or “false”. During inference, the query-document relevance score is determined based on the logit of the generated token. For example, a T5 model can be fine-tuned to generate classification tokens for relevant or irrelevant querydocument pairs [13]. At inference time, a softmax function is applied to the logits of “true” and “false” tokens, and the relevance score is calculated as the probability of the “true” token. The following method [142] involves a multi-view learning approach based on the T5 model. This approach simultaneously considers two tasks: generating classification tokens for a given query-document pair and generating the corresponding query conditioned on the provided document. DuoT5 [143] considers a triple (q, di, dj) as the input of the T5 model and is fine-tuned to generate token “true” if document di is more relevant to query qi than document dj ,
and “false” otherwise. During inference, for each document di, it enumerates all other documents dj and uses global aggregation functions to generate the relevance score si for document di (e.g., si = Pj pi,j, where pi,j represents the probability of generating “true” when taking (q,di,dj) as the model input).
Beyond the aforementioned studies, several studies have also explored different training losses and model architectures for reranker training. For example, RankT5 [144] is proposed to directly yield a numerical relevance score for each query-document pair during training and optimize the ranking performance with “pairwise” or “listwise” ranking losses. It differs significantly from the previous studies that optimize rerankers by generating text tokens and using a generation loss, and the use of ranking loss (e.g., RankNet [176]) is more reasonable and aligns better with the inherent nature of the ranking task. Besides, Yoon et al. [145] propose ListT5, a listwise reranker based on Fusionin-decoder architecture. It jointly takes multiple documents as input and directly generates a reranked document list during training and inference.
5.1.3	Decoder-only
Recently, there have been some attempts [122, 146–149] to rerank documents by fine-tuning decoder-only models (such as LLaMA). For example, RankLLaMA [122] proposes formatting the query-document pair into a prompt “query: {query} document: {document} [EOS]” and utilizes the last token representation for relevance calculation. Besides, TSARankLLM [146] has been proposed to bridge the gap between LLMs’ conventional training objectives and the specific needs of document ranking through two-stage training. The first stage involves continuously pretraining LLMs using a large number of relevant text pairs collected from web resources, helping the LLMs to naturally generate queries relevant to the input document. The second stage focuses on improving the model’s text ranking performance using high-quality supervised data and well-designed loss functions. Peng et al. [147] propose a query-dependent parameter efficient fine-tuning (Q-PEFT) approach for ranking, which helps the LLM generate true queries based on given documents. Different from these pointwise rerankers [122, 146, 147], Zhang et al. [148] and Liu et al. [149] proposes to train a listwise reranker that directly outputs a reranked document list. Specifically, Zhang et al. [148] first demonstrate that existing pointwise datasets (such as MS MARCO [99]), which only contain binary query-document labels, are insufficient for training efficient listwise rerankers. Then, they propose to use the ranking results of existing ranking systems (such as Cohere rerank API) as gold rankings to train a listwise reranker based on Code-LLaMA-Instruct. Liu et al. [149] propose PE-Rank, which compresses each document in the list into a single embedding and then inputs these document embeddings into reranker, which significantly reduces the input length and improves the efficiency of reranker.
5.2	Utilizing LLMs as Unsupervised Rerankers
As the size of LLMs scales up (e.g., exceeding 10 billion parameters), it becomes increasingly difficult to fine-tune the
(Relevance Generation)
(Query Generation)
(a) Pointwise method
Prompt
Given a query #{query}, which of the following two documents is more relevant to the query?
Document 1: #{document_1};	Document 2: #{document_2}
Output Document 1 or Document 2:
Output
Document 1 / Document 2
(c) Pairwise method
Fig. 5. Three types of unsupervised reranking methods: (a) pointwise methods that consist of relevance generation (upper) and query generation (lower), (b) listwise methods, and (c) pairwise methods.
reranking model. Addressing this challenge, recent efforts have attempted to prompt LLMs to directly enhance document reranking in an unsupervised way. In general, these prompting strategies can be divided into three categories: pointwise, listwise, and pairwise methods. A comprehensive exploration of these strategies follows in the subsequent sections.
As for the query generation shown in the lower part of Figure 5 (a), the query-document relevance score is determined by the average log-likelihood of generating the actual query tokens based on the document:
score =
||| X logp(qi|q<i,d, P),
(2)
5.2.1 Pointwise methods
The pointwise methods measure the relevance between a query and a single document, and can be categorized into two types: relevance generation [150–152, 157] and query generation [153, 154, 156].
The upper part in Figure 5 (a) shows an example of relevance generation based on a given prompt, where LLMs output a binary label (“Yes” or “No”) based on whether the document is relevant to the query. Following [13], the querydocument relevance score f (q,d) can be calculated based on the log-likelihood of token “Yes” and “No” with a softmax function:
f (q, d) =
exp(SY)
exp(SY) + exp(SN) ’
(1)
where SY and SN represent the LLM’s log-likelihood scores of “Yes” and “No” respectively. In addition to binary labels, Zhuang et al. [151] propose to incorporate fine-grained relevance labels (e.g., “highly relevant”, “somewhat relevant” and “not relevant”) into the prompt, which helps LLMs more effectively differentiate among documents with varying levels of relevance to a query. Guo et al. [152] discuss the issues of inconsistent and biased relevance assessments of existing pointwise rerankers and introduce MCRanker that generates relevance scores based on a series of criteria from multiple perspectives.
where |q | denotes the token number of query q, d denotes the document, and P represents the provided prompt. The documents are then reranked based on their relevance scores. It has been proven that some LLMs (such as T0) yield significant performance in zero-shot document reranking based on the query generation method [153]. Recently, research [154] has also shown that the LLMs that are pre-trained without any supervised instruction fine-tuning (such as LLaMA) also yield robust zero-shot ranking ability.
Although effective, these methods primarily rely on a handcrafted prompt (e.g., “Please write a query based on this document”), which may not be optimal. Previous study [155] has shown that prompt has a significant impact on the performance of LLM reranker. Thus, how to design appropriate prompts for ranking task is an important problem. Along this line, a discrete prompt optimization method Co-Prompt [156] is proposed for better prompt generation in reranking tasks. Besides, PaRaDe [158] proposes a difficulty-based method to select the most difficult k incontext demonstrations to include in the prompt, proving improvements compared with zero-shot performance. Nevertheless, the experiments in the paper indicate that such difficulty-based selection does not even show a significant advantage compared to random selection, showing that the demonstration selection in ranking task is a very challenging problem. The main challenge lies in the complex nature of query-document relationship, which requires effectively
combining multiple demonstrations to help the LLM understand such relationship. Aiming to select more effective demonstrations for ranking task, Liu et al. [157] propose DemoRank, an effective demonstration selection framework. The core component of DemoRank is a dependency-aware demonstration reranker, which reranks a list of demonstrations (usually obtained by a demonstration retriever) so that the combination of top-ranked demonstrations can yield better performance. An efficient method is proposed to construct the training samples for such demonstration reranker and a novel list-pairwise training loss is designed for optimization.
5.2.2	Listwise Methods
Listwise methods [159, 160] aim to directly rank a list of documents (see Figure 5 (b)). These methods insert the query and a document list into the prompt and instruct the LLMs to output the reranked document identifiers. Due to the limited input length of LLMs, it is not feasible to insert all candidate documents into the prompt. To alleviate this issue, these methods employ a sliding window strategy to rerank a subset of candidate documents each time. This strategy involves ranking from back to front using a sliding window, re-ranking only the documents within the window at a time.
Although listwise methods have yielded promising performance, they still suffer from some weaknesses: (1) The performance of listwise methods is highly sensitive to the document order in the prompt. When the document order is randomly shuffled, listwise methods perform even worse than BM25 [159], revealing positional bias issues in the listwise ranking of LLMs. (2) The use of sliding windows limits the number of documents that can be ranked each time, and the dependency between adjacent windows prevents parallelization of LLM inference, thereby reducing the efficiency of reranking. Recently, some studies have attempted to mitigate these issues. Tang et al. [161] introduce a permutation self-consistency method, which involves shuffling the list in the prompt and aggregating the generated results to achieve a more accurate and a positionally unbiased ranking. Chen et al. [162] introduce a tournament mechanism into listwise ranking and propose TourRank, which parallelizes the reranking process through intelligent grouping and use a tournament-like points system to reduce the impact of the initial document order. Parry et al. [163] propose a parallelizable partitioning algorithm for listwise ranking, which also aims at mitigating efficiency issues. Reddy et al. [178] propose a novel listwise reranking approach which leverages the output logits of the first generated identifier to derive a ranked passage list.
5.2.3	Pairwise Methods
In pairwise methods, LLMs are given a prompt that consists of a query and a document pair (see Figure 5 (c)). Then, they are instructed to generate the identifier of the document with higher relevance. To rerank all candidate documents, aggregation methods like AllPairs are used [164]. AllPairs first generates all possible document pairs, yields discrete judgments for each pair (e.g., Document 1 or Document 2), and aggregates a final relevance score for each document. Efficient sorting algorithms, such as heap sort and
bubble sort, are employed to speed up the ranking process. These sorting algorithms utilize efficient data structures to compare document pairs selectively and elevate the most relevant documents to the top of the ranking list, which is particularly useful in top-k ranking. Experimental results show the state-of-the-art performance on the standard benchmarks using moderate-size LLMs (e.g., Flan-UL2 with 20B parameters), which are much smaller than those typically employed in listwise methods (e.g., GPT3.5). Building on the pairwise prompting approach, Luo et al. [166] introduce an innovative scoring unit that leverages the generation probability of judgments instead of discrete judgments, and further design a graph-based aggregation approach to obtain a final relevance score for each document. Besides, the pairwise comparison can also be utilized as a postprocessing step to adjust the relevance scores generated by the pointwise LLM reranker [167].
Although effective, pairwise methods still suffer from high time complexity. To alleviate the efficiency problem, a setwise approach [165] has been proposed to compare a set of documents at a time and select the most relevant one from them. This approach allows the sorting algorithms (such as heap sort) to compare more than two documents at each step, thereby reducing the total number of comparisons and speeding up the sorting process.
5.2.4	Comparison and Discussion
We compare different unsupervised methods from various aspects to better illustrate the strengths and weaknesses of each method, which is summarized in Table 6. The representative methods [150, 153, 159, 164] in pointwise, listwise, and pairwise ranking, and some supervised methods [12, 13, 144] mentioned in Section 5.1 are selected for performance comparison.
The pointwise methods (query generation and relevance generation) judge the relevance of each query-document pair independently, thus offering lower time complexity and enabling batch inference. However, compared to other methods, it does not have an advantage in terms of performance. The listwise method yields significant performance especially when calling GPT-4, but suffers from expensive API cost and non-reproducibility [173]. Compared with the listwise method, the pairwise method shows competitive results based on a much smaller model FLAN-UL2 (20B). Stemming from the necessity to compare an extensive number of document pairs, its primary drawback is low efficiency.
5.3	Utilizing LLMs for Training Data Augmentation
Furthermore, in the realm of reranking, researchers have explored the integration of LLMs for training data augmentation [168, 170, 171, 173–175]. For example, ExaRanker [168] and ExaRanker-Open [169] generate explanations for querypassage pairs using GPT-3.5 and open-source LLMs respectively, and subsequently trains a seq2seq ranking model to generate relevance labels along with corresponding explanations. InPars-Light [170] is proposed as a cost-effective method to synthesize queries for documents by prompting LLMs. Askari et al. [171] proposes to generate synthetic documents based on LLMs in response to user queries.
TABLE 6. The comparison between different methods. N denotes the number of documents to rerank. The Complexity, Logits, and Batch represent the computational complexity, whether accesses LLM’s logits, and whether allows batch inference respectively. k is the constant in sliding windows strategy. As for the Performance, we use NDCG@10 as a metric, and the results are calculated by reranking the top 100 documents retrieved by BM25 on TREC-DL2019 and TREC-DL2020. The best model is in bold while the second-best is marked with an underline. The results come from previous study [164]. *Since the parameters of ChatGPT have not been released, its model parameters are based on public estimates [177].
Methods		LLM	Size	Properties			Performance	
				Complexity	Logits	Batching	TREC-DL19	TREC-DL20
Initial Retriever	BM25	-	-	-	-	-	50.58	47.96
	monoBERT [12]	BERT	340M	-	✓	✓	70.50	67.28
Supervised	monoT5 [13]	T5	220M	-	✓	✓	71.48	66.99
	RankT5 [144]	T5	3B	-	✓	✓	71.22	69.49
Unsupervised-Pointwise	Query Generation [153]	FLAN-UL2	20B	O(N)	✓	✓	58.95	60.02
	Relevance Generation [150]	FLAN-UL2	20B	O(N)	✓	✓	64.61	65.39
Unsupervised-Listwise	RankGPT3.5 [159] RankGPT4 [159]	gpt-3.5-turbo gpt-4	154B* 1T*	O(k * N) O(k * N)			65.80 75.59	62.91 70.56
Unsupervised-Pairwise	PRP-Allpair [164] PRP-Heapsort [164]	FLAN-UL2 FLAN-UL2	20B 20B	O(N 2) O(N * logN)	✓ ✓	✓	72.42 71.88	70.68 69.43
Furthermore, Askari et al. [172] propose to utilize reinforcement learning to improve the quality of synthetic documents generated by LLMs.
Recently, many studies [173–175] have also attempted to distill the document ranking capability of LLMs into a specialized model. RankVicuna [173] proposes to use the ranking list of RankGPT3.5 [159] as the gold list to train a 7B parameter Vicuna model. RankZephyr [174] introduces a two-stage training strategy for distillation: initially applying the RankVicuna recipe to train Zephyrγ in the first stage, and then further finetuning it in the second stage with the ranking results from RankGPT4 . These two studies not only demonstrate competitive results but also alleviate the issue of ranking results non-reproducibility of black-box LLMs. Besides, researchers [175] have also tried to distill the ranking ability of a pairwise ranker, which is computationally demanding, into a simpler but more efficient pointwise ranker.
5.4	Limitations
Although recent research on utilizing LLMs for document reranking has made significant progress, it still has some limitations. First, due to the reliance on API calls and a large number of parameters, the process of LLM ranking could be expensive and inefficient. Therefore, achieving a tradeoff between the cost/efficiency and performance of LLMs is a topic worth discussing. Along this line, Rashid et al. [179] propose a budget-aware ranking solution which maximizes the LLM’s performance within a given budget. Besides, Meng et al. [180] systematically discuss the improvements in ranking efficiency and effectiveness brought by the rank list truncation technique. Second, while existing studies mainly focus on applying LLMs to open-domain datasets (such as MSMARCO [99]) or relevance-based text ranking tasks, their adaptability to in-domain datasets [113] and non-standard ranking datasets [181] remains an area that demands more comprehensive exploration.
6 Reader
With the impressive capabilities of LLMs in understanding, extracting, and processing textual data, researchers explore expanding the scope of IR systems beyond content ranking to answer generation. In this evolution, a reader module has been introduced to generate answers based on the document corpus in IR systems. By integrating a reader module, IR systems can directly present conclusive passages to users. Compared with providing a list of documents, users can simply comprehend the answering passages instead of analyzing the ranking list in this new paradigm. Furthermore, by repeatedly providing documents to LLMs based on their generating texts, the final generated answers can potentially be more accurate and information-rich than the original retrieved lists.
A naive strategy for implementing this function is to heuristically provide LLMs with documents relevant to the user queries or the previously generated texts to support the following generation. However, this passive approach limits LLMs to merely collecting documents from IR systems without active engagement. An alternative solution is to train LLMs to interact proactively with search engines. For example, LLMs can formulate their own queries instead of relying solely on user queries or generated texts for references. According to the way LLMs utilize IR systems in the reader module, we can categorize them into passive readers and active readers. Each approach has its advantages and challenges for implementing LLM-powered answer generation in IR systems. Furthermore, since the documents provided by upstream IR systems are sometimes too long to directly feed as input for LLMs, some compression modules are proposed to extractively or abstractively compress the retrieved contexts for LLMs to understand and generate answers for queries. We will present these reader and compressor modules in the following parts and briefly introduce the existing analysis work on retrieval-augmented generation (RAG) strategy and their applications.
TABLE 7. The comparison of existing representative methods that have a passive reader module. REALM and RAG do not use LLMs, but their frameworks have been widely applied in many following approaches.
Methods	Backbone models	Where to incorporate retrieval	When to retrieve	How to use LLMs
REALM [182]	BERT	Input layer	In the beginning	Fine-tuning
RAG [183]	BART	Input layer	In the beginning	Fine-tuning
REPLUG [184]	GPT	Input layer	In the beginning	Fine-tuning
Atlas [185]	T5	Input layer	In the beginning	Fine-tuning
Lazaridou et al. [186]	Gopher	Input layer	In the beginning	Prompting
He et al. [187]	GPT	Input layer	In the beginning	Prompting
Chain-of-Note [188]	LLaMA	Input layer	In the beginning	Fine-tuning
RALM [189]	LLaMA & OPT & GPT	Input layer	During generation (every n tokens)	Prompting
RETRO [23]	Transformer	Attention layer	During generation (every n tokens)	Training from scratch
ITERGEN [190]	GPT	Input layer	During generation (every answer)	Prompting
IRCoT [191]	Flan-T5 & GPT	Input layer	During generation (every sentence)	Prompting
FLARE [192]	GPT	Input layer	During generation (aperiodic)	Prompting
Self-RAG [193]	LLaMA	Input layer	During generation (aperiodic)	Fine-tuning
6.1	Passive Reader
To generate answers for users, a straightforward strategy is to supply the retrieved documents according to the queries or previously generated texts from IR systems as inputs to LLMs for creating passages [23, 182–187, 189, 191, 192, 194– 197]. By this means, these approaches use the LLMs and IR systems separately, with LLMs functioning as passive recipients of documents from the IR systems. The strategies for utilizing LLMs within IR systems’ reader modules can be categorized into the following three groups according to the frequency of retrieving documents for LLMs.
6.1.1	Once-Retrieval Reader
To obtain useful references for LLMs to generate responses for user queries, an intuitive way is to retrieve the top documents based on the queries themselves in the beginning. For example, REALM [182] adopts this strategy by directly attending the document contents to the original queries to predict the final answers based on masked language modeling. RAG [183] follows this strategy but applies the generative language modeling paradigm. However, these two approaches only use language models with limited parameters, such as BERT and BART. Recent approaches such as REPLUG [184] and Atlas [185] have improved them by leveraging LLMs such as GPTs, T5s, and LLaMAs for response generation. To yield better answer generation performances, these models usually fine-tune LLMs on QA tasks. However, due to the limited computing resources, many methods [186, 187, 195, 198] choose to prompt LLMs for generation as they could use larger LMs in this way. Furthermore, to improve the quality of the generated answers, several approaches [188, 199] also try to train or prompt the LLMs to generate contexts such as citations or notes in addition to the answers to force LLMs to understand and assess the relevance of retrieved passages to the user queries. ActiveRAG [200] and PG-RAG [201] improve them by using knowledge construction during the answer generation process. Some approaches [196, 202] evaluate the importance of each retrieved reference using policy gradients to indicate which reference is more useful for generating. Specifically, [202] utilize LLMs themselves to provide importance for different references which also supply additional training signals. Besides, researchers explore instruction tuning LLMs such LLaMAs to improve
their abilities to generate conclusive passages relying on retrieved knowledge [203–205]. During the training of LLM-based readers, some approaches [206] explore the strategy of contrastive learning by augmenting training data by removing and replacing retrieved passages to improve the generating performances. Additionally, SPRING [207] inserts several trainable tokens between the retrieved documents and issued questions for better optimization of the reader. R2AG [208] extracts features from retrieval models and attaches them to the reference contents to overcome the semantic gaps between LLMs and retrievers. Yoran et al. [209] also propose to generate noisy training data to help LLMs generate correct answers while irrelevant contents are included in the retrieved contexts. RAAT [210] and ATM [211] further solve the noisy problem by introducing the adversarial training strategy.
6.1.2	Periodic-Retrieval Reader
However, while generating long conclusive answers, it is shown [23, 189] that only using the references retrieved by the original user intents as in once-retrieval readers may be inadequate. For example, when providing a passage about “Barack Obama”, language models may need additional knowledge about his university, which may not be included in the results of simply searching the initial query. In conclusion, language models may need extra references to support the following generation during the generating process, where multiple retrieval processes may be required. To address this, solutions such as RETRO [23] and RALM [189] have emerged, emphasizing the periodic collection of documents based on both the original queries and the concurrently generated texts (triggering a retrieval every n generated tokens). In this manner, when generating the text about the university career of Barack Obama, the LLM can receive additional documents as supplementary materials. This need for additional references highlights the necessity for multiple retrieval iterations to ensure robustness in subsequent answer generation. Notably, RETRO [23] introduces a novel approach incorporating cross-attention between the generating texts and the references within the Transformer attention calculation, as opposed to directly embedding references into the input texts of LLMs. Since it involves additional cross-attention modules in the Transformer ’s structure, RETRO trains this model from scratch.
However, these two approaches mainly rely on the successive n tokens to separate generation and retrieve documents, which may not be semantically continuous and may cause the collected references noisy and useless. To solve this problem, some approaches such as IRCoT [191] also explore retrieving documents for every generated sentence, which is a more complete semantic structure. Furthermore, researchers find that the whole generated passages can be considered as conclusive contexts for current queries and can be used to find more relevant knowledge to generate more thorough answers. Consequently, many recent approaches [190, 212–215] have also tried to extend this periodic-retrieval paradigm to iteratively using the whole generated passages to retrieve references to re-generate the answers, until the iterations reach a pre-defined limitation. Particularly, these methods can be regarded as special periodic-retrieval readers that retrieve passages when every answer is (re)-generated. Since the LLMs can receive more comprehensive and relevant references with the iterations increase, these methods that combine RAG and generation-augmented retrieval strategies can generate more accurate answers but consume more computation costs.
6.1.3	Aperiodic-Retrieval Reader
In the above strategy, the retrieval systems supply documents to LLMs in a periodic manner. However, retrieving documents in a mandatory frequency may mismatch the retrieval timing and can be costly. Recently, FLARE [192] has addressed this problem by automatically determining the timing of retrieval according to the probability of generating texts. Since the probability can serve as an indicator of LLMs’ confidence during text generation [216, 217], a low probability for a generated term could suggest that LLMs require additional knowledge. Specifically, when the probability of a term falls below a predefined threshold, FLARE employs IR systems to retrieve references in accordance with the ongoing generated sentences, while removing these low-probability terms. FLARE adopts this strategy of prompting LLMs for answer generation solely based on the probabilities of generating terms, avoiding the need for finetuning while still maintaining effectiveness. Besides, selfRAG [193] tends to solve this problem by training LLMs such as LlaMA to generate specific tokens when they need additional knowledge to support following generations. Another critical model is introduced to judge whether the retrieved references are beneficial for generating.
We summarize representative passive reader approaches in Table 7, considering various aspects such as the backbone language models, the insertion point for retrieved references, the timing of using retrieval models, and the tuning strategy employed for LLMs.
6.2	Active Reader
However, the passive reader-based approaches separate IR systems and generative language models. This signifies that LLMs can only submissively utilize references provided by IR systems and are unable to interactively engage with the IR systems in a manner akin to human interaction such as issuing queries to seek information.
To allow LLMs to actively use search engines, SelfAsk [218], DSP [219], and PlanRAG [220] try to employ fewshot prompts for LLMs, triggering them to search queries when they believe it is required. For example, in a scenario where the query is “When was the existing tallest wooden lattice tower built?”, these prompted LLMs can decide to search a query “What is the existing tallest wooden lattice tower” to gather necessary references as they find the query cannot be directly answered. Once acquired information about the tower, they can iteratively query IR systems for more details until they determine to generate the final answers instead of asking questions. To alleviate the problem of insufficient manually annotated data for fine-tuning, LPKG [221] constructs high-quality active retrieval-augmented reasoning paths from existing knowledge graphs. Notably, these methods involve IR systems to construct a single reasoning chain for LLMs. MRC [222] further improves these methods by prompting LLMs to explore multiple reasoning chains and subsequently combining all generated answers using LLMs.
6.3	Compressor
Existing LLMs, especially open-sourced ones, such as LLaMA and Flan-T5, have limited input lengths (usually 4,096 or 8,192 tokens). However, the documents or web pages retrieved by upstream IR systems are usually long. Therefore, it is difficult to concatenate all the retrieved documents and feed them into LLMs to generate answers. Though some approaches manage to solve these problems by aggregating the answers supported by each reference as the final answers, this strategy neglects the potential relations between retrieved passages. A more straightforward way is to directly compress the retrieved documents into short input tokens or even dense vectors [223–229].
To compress the retrieved references, an intuitive idea is to extract the most useful K sentences from the retrieved documents. LeanContext [223] applies this method and trains a small model by reinforcement learning (RL) to select the top K similar sentences to the queries. The researchers also augment this strategy by using a free open-sourced text reduction method for the rest sentences as a supplement. Instead of using RL-based methods, RECOMP [224] directly uses the probability or the match ratio of the generated answers to the golden answers as signals to build training datasets and tune the compressor model. For example, the sentence corresponding to the highest generating probability is the positive one while others are negative ones. Furthermore, FILCO [225] applies the “hindsight” methods, which directly align the prior distribution (the predicted importance probability distribution of sentences without knowing the gold answer) to the posterior distribution (the same distribution of sentences within knowing the gold answer) to tune language models to select sentences.
However, these extractive methods may lose potential intent among all references. Therefore, abstractive methods are proposed to summarize retrieved documents into short but concise summaries for downstream generation. These methods [224, 226] usually distill the summarizing abilities of LLMs to small models. For example, TCRA [226] leverages GPT-3.5-turbo to build abstractive compression datasets for MT5 model. Recently, xRAG [228] proposes
to use a freeze sentence encoder and tunes a projector to comprise retrieved passage into a dense vector.
6.4	Analysis
With the rapid development of the above reader approaches, many researchers have begun to analyze the characteristics of retrieval-augmented LLMs:
•	Liu et al. [230] find that the position of the rele-vant/golden reference has significant influences on the final generation performance. The performance is always better when the relevant reference is at the beginning or the end, which indicates the necessity of introducing a ranking module to order the retrieved knowledge.
•	Ren et al. [231] observe that by applying retrieval augmentation generation strategy, LLMs can have a better awareness of their knowledge boundaries.
•	Liu et al. [232] analyze different strategies of integrating retrieval systems and LLMs such as concatenate (i.e., concatenating all references for answer generation) and post fusion (i.e., aggregating the answers corresponding to each reference). They also explore several ways of combining these two strategies.
•	Aksitov et al. [233] demonstrate that there exists an attribution and fluency tradeoff for retrieval-augmented LLMs: with more received references, the attribution of generated answers increases while the fluency decreases.
•	Mallen et al. [234] argue that always retrieving references to support LLMs to generate answers hurts the question-answering performance. The reason is that LLMs themselves may have adequate knowledge while answering questions about popular entities and the retrieved noisy passages may interfere and bias the answering process. To overcome this challenge, they devise a simple strategy that only retrieves references while the popularity of entities in the query is quite low. By this means, the efficacy and efficiency of RAG both improve. Ding et al. [235] pay attention to the same phenomenon and propose to paraphrase several perturbed questions for LLMs to answer according to their internal knowledge and perform a consistency check to decide whether to retrieve external information. [236–238] also focus on this problem using triplets extracted from the knowledge graph and the confidence of LLMs. [239, 240] solve this problem by training LLMs or small language models to judge whether the questions are known by LLMs.
•	Jin et al. [241] analyze the impacts of knowledge conflict among retrieved references and LLM’s internal knowledge. and find that LLMs follow the majority rule while facing this phenomenon.
•	Cho et al. [242], Xue et al. [243], and Chaudhari et al. [244] explore the attacking technique towards LLM-based retrieval augmented generation by poisoning retrieved passages. They find that even introducing some typos in the references may also affect the answer generation.
•	Wang et al. [245] construct an in-domain reader evaluation dataset. They deeply analyze the effectiveness of the retrieval augmented generation paradigm under the long-tail and in-domain situations.
•	Cuconasu et al. [246] compare the performances between readers based on base LLMs and “instructed” LLMs. Different from previous popular belief, They find base
models outperform their corresponding instruction-tuned versions.
6.5	Applications
Recently, researchers [247–253] have applied the RAG strategy to areas such as clinical QA, medical QA, and financial QA to enhance LLMs with external knowledge and to develop domain-specific applications. For example, ATLANTIC [248] adapts Atlas to the scientific domain to derive a science QA system. Besides, some approaches [254] also apply techniques in federated learning such as multiparty computation to perform personal RAG with privacy protection.
Furthermore, to better facilitate the deployment of these RAG systems, some tools or frameworks are proposed [194, 255, 256]. For example, RETA-LLM [194] breaks down the whole complex generation task into several simple modules in the reader pipeline. These modules include a query rewriter module for refining query intents, a passage extraction module for aligning reference lengths with LLM limitations, and a fact verification module for confirming the absence of fabricated information in the generated answers. Jin et al. [257] release the FlashRAG toolkit for the reproduction and development of RAG research, which includes 32 pre-processed benchmark datasets and 14 state-of-the-art algorithms.
6.6	Limitations
Several IR systems applying the RAG strategy, such as New Bing and Langchain, have already entered commercial use. However, there are also some challenges in this novel retrieval-augmented content generation system. These include challenges such as effective query reformulation, optimal retrieval frequency, correct document comprehension, accurate passage extraction, and effective content summarization. It is crucial to address these challenges to effectively realize the potential of LLMs in this paradigm.
7	Search Agent
With the development of LLMs, IR systems are also facing new changes. Among them, developing LLMs as intelligent agents has attracted more and more attention. This conceptual shift aims to mimic human browsing patterns, thereby enhancing the capability of these models to handle complex retrieval tasks. Empowered by the advanced natural language understanding and generation capabilities of LLMs, these agents can autonomously search, interpret, and synthesize information from a wide range of sources.
One way to achieve this ability is to design a pipeline that combines a series of modules and assigns different roles to them. Such a pre-defined pipeline mimics users’ behaviors on the web by breaking it into several sub-tasks which are performed by different modules. However, this kind of static agent cannot deal with the complex nature of users’ behavior sequences on the web and may face challenges when interacting with real-world environments. An alternative solution is to allow LLMs to freely explore the web and make interactions themselves, namely letting the LLM itself decide what action it will take next based on the feedback from the environment (or humans). These agents have more flexibility and act more like human beings.
7.1	Static Agent
To mimic human search patterns, a straightforward approach is to design a static system to browse the web and synthesize information step by step [258–263]. By breaking the information-seeking process into multiple subtasks, they design a pipeline that contains various LLM-based modules in advance and assigns different subtasks to them.
LaMDA [258] serves as an early work of the static agent. It consists of a family of Transformer-based neural language models specialized for dialog, with up to 137B parameters, pre-trained on 1.56T tokens from public dialogue data and web text. The study emphasizes the model’s development through a static pipeline, encompassing large-scale pretraining, followed by strategic fine-tuning stages aimed at enhancing three critical aspects: dialogue quality, safety, and groundedness. It can integrate external IR systems for factual grounding. This integration allows LaMDA to access and use external and authoritative sources when generating responses. SeeKeR [259] also incorporates the Internet search into its modular architecture for generating more factual responses. It performs three sequential tasks: generating a search query, generating knowledge from search results, and generating a final response. GopherCite [262] uses a search engine like Google Search to find relevant sources. It then synthesizes a response that includes verbatim quotes from these sources as evidence, aligning the Gopher ’s output with verified information. WebAgent [261] develops a series of tasks, including instruction decomposition and planning, action programming, and HTML summarization. It can navigate the web, understand and synthesize information from multiple sources, and execute web-based tasks, effectively functioning as an advanced search and interaction agent. WebGLM [260] designs an LLM-augmented retriever, a bootstrapped generator, and a human preference-aware scorer. These components work together to provide accurate web-enhanced question-answering capabilities that are sensitive to human preferences. Shi et al. [263] focus on enhancing the relevance, responsibility, and trustworthiness of LLMs in web search applications via an intent-aware generator, an evidence-sensitive validator, and a multi-strategy supported optimizer. CoSearchAgent [264] leverages LLMs to understand and process user queries within the context of multi-party conversations. It is capable of rewriting incomplete or ambiguous queries, asking clarifying questions, and searching the web for relevant information using APIs.
7.2	Dynamic Agent
Researches of dynamic agent can be further categorized into agent design, framework and system, and benchmark.
7.2.1	Agent Design
Instead of statically arranging LLMs in a pipeline, We-bGPT [24] takes an alternate approach by training LLMs to use search engines automatically. This is achieved through the application of a reinforcement learning framework, within which a simulated environment is constructed for GPT-3 models. Specifically, the WebGPT model employs special tokens to execute actions such as querying, scrolling through rankings, and quoting references on search engines. This innovative approach allows the GPT-3 model to use
search engines for text generation, enhancing the reliability and real-time capability of the generated texts. A following study [265] has extended this paradigm to the domain of Chinese question answering. ASH (Actor-Summarizer-Hierarchical) prompting [266] significantly enhances the ability of LLMs on WebShop benchmark. TRAD [267] enhances LLM agents for sequential decision-making tasks. It first utilizes step-level demonstration selection through thought matching. Then it enhances the agent’s decisionmaking process by considering the temporal context of actions. AutoWebGLM [268] aims address the limitations of current web browsing agents, which often struggle with the versatility of webpage actions, the length of HTML text, and the open-domain nature of web decision-making. It uses an HTML simplification algorithm, a hybrid human-AI method and reinforcement learning and rejection sampling to bootstrap the model, allowing it to improve webpage comprehension, browser operations, and task decomposition autonomously.
7.2.2	Framework and System
KwaiAgents [269] is a generalized information-seeking agent system built around LLMs. In this system, LLMs act as the cognitive core, capable of understanding queries, referencing external documents, updating and retrieving internal memory, and executing tasks using a hybrid search-browse toolkit. WebVoyager [270] is a large multimodal model-powered agent, capable of navigating and interacting with websites by processing both visual inputs (like screenshots) and textual content, mimicking human web browsing behavior. IoA [271] is a framework that enables collaboration among a diverse range of autonomous agents, particularly those based on LLMs. It aims to address the issue of integrating third-party agents, simulating distributed environments, and adapting to dynamic task requirements due to rigid communication and coordination mechanisms. Agent-E [272] aims to address the problems of dynamic and noisy nature of web content, the complexity of user interfaces, and the need for sophisticated planning to execute multi-step tasks. It utilizes a two-tiered system consisting of a planner agent and a browser navigation agent, which allows for a clear separation of roles and responsibilities. Besides, Agent-E introduces a flexible approach to Document Object Model (DOM) distillation, enabling it to choose the most suitable DOM representation for a given task. MindSearch [273] is a multi-agent framework that mimics human cognitive processes in web information seeking and integration. It involves a two-pronged approach using a WebPlanner and multiple WebSearchers. The WebPlanner acts as a high-level planner, decomposing user queries into atomic subquestions and orchestrating the reasoning process. The WebSearchers, are tasked with performing hierarchical information retrieval from the internet based on the sub-questions assigned by the WebPlanner. They employ a coarse-to-fine selection strategy to efficiently extract valuable information from a large number of web pages, managing the information overload that LLMs might otherwise struggle with.
7.2.3	Benchmark
Some works develop important benchmarks for interactive web-based agents [274–277]. For example, WebShop [275]
aims to provide a scalable, interactive web-based environment for language understanding and decision-making, focusing on the task of online shopping. It first takes a raw observation from the environment and produces a new, more meaningful representation that aligns with the specific goal. Then, it dynamically predicts the next action based on the summarized observation and the interaction history. WebCanvas [277] is also an online evaluation framework designed to benchmark the performance of web agents in dynamic and evolving online environments. It aims to address the gap between existing benchmarks, which tend to capture static aspects of the web, and the real-world needs of web agents that must adapt to frequent updates in user interfaces and content.
7.3	Limitations
Though the aspect of static search agents has been thoroughly studied, the literature on dynamic search agents remains limited. Some agents may lack mechanisms for real-time fact-checking or verification against authoritative sources, leading to the potential dissemination of misinformation. Moreover, since LLMs are trained on data from the Internet, they may inadvertently perpetuate biases present in the training data. This can lead to biased or offensive outputs and may collect unethical content from the web. Finally, as LLMs process user queries, there are concerns regarding user privacy and data security, especially if sensitive or personal information is involved in the queries.
8	Future Direction
In this survey, we comprehensively reviewed recent advancements in LLM-enhanced IR systems and discussed their limitations. Since the integration of LLMs into IR systems is still in its early stages, there are still many opportunities and challenges. In this section, we summarize the potential future directions in terms of the four modules in an IR system we just discussed, namely query rewriter, retriever, reranker, and reader. In addition, as evaluation has also emerged as an important aspect, we will also introduce the corresponding research problems that need to be addressed in the future. Another discussion about important research topics on applying LLMs to IR can be found in a recent perspective paper [50].
8.1	Query Rewriter
LLMs have enhanced query rewriter for both ad-hoc and conversational search scenarios. Most of the existing methods rely on prompting LLMs to generate new queries. While yielding remarkable results, the refinement of rewriting quality and the exploration of potential application scenarios require further investigation.
•	Rewriting queries according to ranking performance. A typical paradigm of prompting-based methods is providing LLMs with several ground-truth rewriting cases (optional) and the task description of query rewriter. Despite LLMs being capable of identifying potential user intents of the query [278], they lack awareness of the resulting retrieval quality of the rewritten query. The absence of this connection can result in rewritten queries that seem correct yet
produce unsatisfactory ranking results. Although some existing studies have used reinforcement learning to adjust the query rewriter process according to generation results [80], a substantial realm of research remains unexplored concerning the integration of ranking results.
•	Improving query rewriter in conversational search. As yet, primary efforts have been made to improve query rewriter in ad-hoc search. In contrast, conversational search presents a more developed landscape with a broader scope for LLMs to contribute to query understanding. By incorporating historical interactive information, LLMs can adapt system responses based on user preferences, providing a more effective conversational experience. However, this potential has not been explored in depth. In addition, LLMs could also be used to simulate user behavior in conversational search scenarios, providing more training data, which are urgently needed in current research.
•	Achieving personalized query rewriter. LLMs offer valuable contributions to personalized search through their capacity to analyze user-specific data. In terms of query rewriter, with the excellent language comprehension ability of LLMs, it is possible to leverage them to build user profiles based on users’ search histories (e.g., issued queries, clickthrough behaviors, and dwell time). This empowers the achievement of personalized query rewriter for enhanced IR and finally benefits personalized search or personalized recommendation.
8.2	Retriever
Leveraging LLMs to improve retrieval models has received considerable attention, promising an enhanced understanding of queries and documents for improved ranking performance. However, despite strides in this field, several challenges and limitations still need to be investigated in the future:
•	Reducing the latency of LLM-based retrievers. LLMs, with their massive parameters and world knowledge, often entail high latency during the inferring process. This delay poses a significant challenge for practical applications of LLM-based retrievers, as search engines require in-time responses. To address this issue, promising research directions include transferring the capabilities of LLMs to smaller models, exploring quantization techniques for LLMs in IR tasks, and so on.
•	Simulating realistic queries for data augmentation. Since the high latency of LLMs usually blocks their online application for retrieval tasks, many existing studies have leveraged LLMs to augment training data, which is insensitive to inference latency. Existing methods that leverage LLMs for data augmentation often generate queries without aligning them with real user queries, leading to noise in the training data and limiting the effectiveness of retrievers. As a consequence, exploring techniques such as reinforcement learning to enable LLMs to simulate the way that real queries are issued holds the potential for improving retrieval tasks.
•	Incremental indexing for generative retrieval. As elaborated in Section 4.2.2, the emergence of LLMs has paved the way for generative retrievers to generate document identifiers for retrieval tasks. This approach encodes document indexes and knowledge into the LLM parameters.
However, the static nature of LLM parameters, coupled with the expensive fine-tuning costs, poses challenges for updating document indexes in generative retrievers when new documents are added. Therefore, it is crucial to explore methods for constructing an incremental index that allows for efficient updates in LLM-based generative retrievers.
•	Supporting multi-modal search. Web pages usually contain multi-modal information, including texts, images, audios, and videos. However, existing LLM-enhanced IR systems mainly support retrieval for text-based content. A straightforward solution is to replace the backbone with multi-modal large models, such as GPT-4 [279]. However, this undoubtedly increases the cost of deployment. A promising yet challenging direction is to combine the language understanding capability of LLMs with existing multi-modal retrieval models. By this means, LLMs can contribute their language skills in handling different types of content.
8.3	Reranker
In Section 5, we have discussed the recent advanced techniques of utilizing LLMs for the reranking task. Some potential future directions in reranking are discussed as follows.
•	Enhancing the online availability of LLMs. Though effective, many LLMs have a massive number of parameters, making it challenging to deploy them in online applications. Besides, many reranking methods [159, 160] rely on calling LLM APIs, incurring considerable costs. Consequently, devising effective approaches (such as distilling to small models) to enhance the online applicability of LLMs emerges as a research direction worth exploring.
•	Improving personalized search. Many existing LLM-based reranking methods mainly focus on the ad-hoc reranking task. However, by incorporating user-specific information, LLMs can also improve the effectiveness of the personalized reranking task. For example, by analyzing users’ search history, LLMs can construct accurate user profiles and rerank the search results accordingly, providing personalized results with higher user satisfaction.
•	Adapting to diverse ranking tasks. In addition to document reranking, there are also other ranking tasks, such as response ranking, evidence ranking, entity ranking and etc., which also belong to the universal information access system. Navigating LLMs towards adeptness in these diverse ranking tasks can be achieved through specialized methodologies, such as instruction tuning. Exploring this avenue holds promise as an intriguing and valuable research trajectory.
8.4	Reader
With the increasing capabilities of LLMs, the future interaction between users and IR systems will be significantly changed. Due to the powerful natural language processing and understanding capabilities of LLMs, the traditional search paradigm of providing ranking results is expected to be progressively replaced by synthesizing conclusive answering passages for user queries using the reader module. Although such strategies have already been investigated by academia and facilitated by industry as we stated in Section 6, there still exists much room for exploration.
•	Improving the reference quality for LLMs. To support answer generation, existing approaches usually directly feed the retrieved documents to the LLMs as references. However, since a document usually covers many topics, some passages in it may be irrelevant to the user queries and can introduce noise during LLMs’ generation. Therefore, it is necessary to explore techniques for extracting relevant snippets from retrieved documents, enhancing the performance of retrieval-augmented generation.
•	Improving the answer reliability of LLMs. Incorporating the retrieved references has significantly alleviated the “hallucination” problem of LLMs. However, it remains uncertain whether the LLMs refer to these supported materials during answering queries. Some studies [231] have revealed that LLMs can still provide unfaithful answers even with additional references. Therefore, the reliability of the conclusive answers might be lower compared to the ranking results provided by traditional IR systems. It is essential to investigate the influence of these references on the generation process, thereby improving the credibility of reader-based novel IR systems.
8.5	Search Agent
With the outstanding performance of LLMs, the patterns of searching may completely change from traditional IR systems to autonomous search agents. In Section 7, we have discussed many existing works that utilize a static or dynamic pipeline to autonomously browse the web. These works are believed to be the pioneering works of the new searching paradigm. However, there is still plenty of room for further improvements.
•	Enhancing the Trustworthiness of LLMs. When LLMs are enabled to browse the web, it is important to ensure the validity of retrieved documents. Otherwise, the unfaithful information may increase the LLMs’ hallucination problem. Besides, even if the gathered information has high quality, it remains unclear whether they are really used for synthesizing responses. A potential strategy to address this issue is enabling LLMs to autonomously validate the documents they scrape. This self-validation process could incorporate mechanisms for assessing the credibility and accuracy of the information within these documents.
•	Mitigating Bias and Offensive Content in LLMs. The presence of biases and offensive content within LLM outputs is a pressing concern. This issue primarily stems from biases inherent in the training data and will be amplified by the low-quality information gathered from the web. Achieving this requires a multi-faceted approach, including improvements in training data, algorithmic adjustments, and continuous monitoring for bias and inappropriate content that LLMs collect and generate.
8.6	Evaluation
LLMs have attracted significant attention in the field of IR due to their strong ability in context understanding and text generation. To validate the effectiveness of LLM-enhanced IR approaches, it is crucial to develop appropriate evaluation metrics. Given the growing significance of readers as integral components of IR systems, the evaluation should
consider two aspects: assessing ranking performance and evaluating generation performance.
•	Generation-oriented ranking evaluation. Traditional evaluation metrics for ranking primarily focus on comparing the retrieval results of IR models with ground-truth (relevance) labels. Typical metrics include precision, recall, mean reciprocal rank (MRR) [280], mean average precision (MAP), and normalized discounted cumulative gain (nDCG) [281]. These metrics measure the alignment between ranking results and human preference on using these results. Nevertheless, these metrics may fall short in capturing a document’s role in the generation of passages or answers, as their relevance to the query alone might not adequately reflect this aspect. This effect could be leveraged as a means to evaluate the usefulness of documents more comprehensively. A formal and rigorous evaluation metric for ranking that centers on generation quality has yet to be defined.
•	Text generation evaluation. The wide application of LLMs in IR has led to a notable enhancement in their generation capability. Consequently, there is an imperative demand for novel evaluation strategies to effectively evaluate the performance of passage or answer generation. Previous evaluation metrics for text generation have several limitations, including: (1) Dependency on lexical matching: methods such as BLEU [282] or ROUGE [283] primarily evaluate the quality of generated outputs based on n-gram matching. This approach cannot account for lexical diversity and contextual semantics. As a result, models may favor generating common phrases or sentence structures rather than producing creative and novel content. (2) Insensitivity to subtle differences: existing evaluation methods may be insensitive to subtle differences in generated outputs. For example, if a generated output has minor semantic differences from the reference answer but is otherwise similar, traditional methods might overlook these nuanced distinctions. (3) Lack of ability to evaluate factuality: LLMs are prone to generating “hallucination” problems [284–287]. The hallucinated texts can closely resemble the oracle texts in terms of vocabulary usage, sentence structures, and patterns, while having non-factual content. Existing methods are hard to identify such problems, while the incorporation of additional knowledge sources such as knowledge bases or reference texts could potentially aid in addressing this challenge.
8.7	Bias
Since ChatGPT was released, LLMs have drawn much attention from both academia and industry. The wide applications of LLMs have led to a notable increase in content on the Internet that is not authored by humans but rather generated by these language models. However, as LLMs may hallucinate and generate non-factual texts, the increasing number of LLM-generated contents also brings worries that these contents may provide fictitious information for users across IR systems. More severely, researchers [288, 289] show that some modules in IR systems such as retriever and reranker, especially those based on neural models, may prefer LLM-generated documents, since their topics are more consistent and the perplexity of them are lower compared with human-written documents. The authors refer to this phenomenon as the “source bias” towards LLM-generated
text. It is challenging but necessary to consider how to build IR systems free from this category of bias.
9	Conclusion
In this survey, we have conducted a thorough exploration of the transformative impact of LLMs on IR across various dimensions. We have organized existing approaches into distinct categories based on their functions: query rewriter, retrieval, reranking, and reader modules. In the domain of query rewriter, LLMs have demonstrated their effectiveness in understanding ambiguous or multi-faceted queries, enhancing the accuracy of intent identification. In the context of retrieval, LLMs have improved retrieval accuracy by enabling more nuanced matching between queries and documents, considering context as well. Within the reranking realm, LLM-enhanced models consider more fine-grained linguistic nuances when re-ordering results. The incorporation of reader modules in IR systems represents a significant step towards generating comprehensive responses instead of mere document lists. The integration of LLMs into IR systems has brought about a fundamental change in how users engage with information and knowledge. From query rewriter to retrieval, reranking, and reader modules, LLMs have enriched each aspect of the IR process with advanced linguistic comprehension, semantic representation, and context-sensitive handling. As this field continues to progress, the journey of LLMs in IR portends a future characterized by more personalized, precise, and user-centric search encounters.
This survey focuses on reviewing recent studies of applying LLMs to different IR components and using LLMs as search agents. Beyond this, a more significant problem brought by the appearance of LLMs is: is the conventional IR framework necessary in the era of LLMs? For example, traditional IR aims to return a ranking list of documents that are relevant to issued queries. However, the development of generative language models has introduced a novel paradigm: the direct generation of answers to input questions. Furthermore, according to a recent perspective paper [50], IR might evolve into a fundamental service for diverse systems. For example, in a multi-agent simulation system [290], an IR component can be used for memory recall. This implies that there will be many new challenges in future IR.
References
[1]	Y. Wu, W. Wu, C. Xing, M. Zhou, and Z. Li, “Sequential matching network: A new architecture for multi-turn response selection in retrieval-based chatbots,” in Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics, ACL 2017, Vancouver, Canada, July 30 - August 4, Volume 1: Long Papers, R. Barzilay and M. Kan, Eds. Association for Computational Linguistics, 2017, pp. 496–505.
[2]	H. Shum, X. He, and D. Li, “From eliza to xiaoice: challenges and opportunities with social chatbots,” Frontiers Inf. Technol. Electron. Eng., vol. 19, no. 1, pp. 10–26, 2018.
[3]	V. Karpukhin, B. Oguz, S. Min, P. S. H. Lewis, L. Wu, S. Edunov, D. Chen, and W. Yih, “Dense passage
[4]
[5]
[6]
[7]
[8]
[9]
[10]
[11]
[12]
retrieval for open-domain question answering,” in Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing, EMNLP 2020, Online, November 16-20, 2020, B. Webber, T. Cohn, Y. He, and Y. Liu, Eds. Association for Computational Linguistics, 2020, pp. 6769–6781.
R. Datta, D. Joshi, J. Li, and J. Z. Wang, “Image retrieval: Ideas, influences, and trends of the new age,” ACM Comput. Surv., vol. 40, no. 2, pp. 5:1–5:60, 2008. C. Yuan, W. Zhou, M. Li, S. Lv, F. Zhu, J. Han, and S. Hu, “Multi-hop selector network for multiturn response selection in retrieval-based chatbots,” in Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing, EMNLP-IJCNLP 2019, Hong Kong, China, November 37, 2019, K. Inui, J. Jiang, V. Ng, and X. Wan, Eds. Association for Computational Linguistics, 2019, pp. 111–120.
Y. Zhu, J. Nie, K. Zhou, P. Du, and Z. Dou, “Content selection network for document-grounded retrievalbased chatbots,” in Advances in Information Retrieval - 43rd European Conference on IR Research, ECIR 2021, Virtual Event, March 28 - April 1, 2021, Proceedings, Part I, ser. Lecture Notes in Computer Science, D. Hiem-stra, M. Moens, J. Mothe, R. Perego, M. Potthast, and F. Sebastiani, Eds., vol. 12656. Springer, 2021, pp. 755–769.
Y. Zhu, J. Nie, K. Zhou, P. Du, H. Jiang, and Z. Dou, “Proactive retrieval-based chatbots based on relevant knowledge and goals,” in SIGIR ’21: The 44th International ACM SIGIR Conference on Research and Development in Information Retrieval, Virtual Event, Canada, July 11-15, 2021, F. Diaz, C. Shah, T. Suel, P. Castells, R. Jones, and T. Sakai, Eds. ACM, 2021, pp. 2000– 2004.
H. Qian, Z. Dou, Y. Zhu, Y. Ma, and J. Wen, “Learning implicit user profiles for personalized retrieval-based chatbot,” CoRR, vol. abs/2108.07935, 2021.
Y. Qu, Y. Ding, J. Liu, K. Liu, R. Ren, W. X. Zhao, D. Dong, H. Wu, and H. Wang, “Rocketqa: An optimized training approach to dense passage retrieval for open-domain question answering,” in Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, NAACL-HLT 2021, Online, June 611, 2021, K. Toutanova, A. Rumshisky, L. Zettlemoyer, D. Hakkani-Tu¨ r, I. Beltagy, S. Bethard, R. Cotterell, T. Chakraborty, and Y. Zhou, Eds. Association for Computational Linguistics, 2021, pp. 5835–5847.
Y. Arens, C. A. Knoblock, and W. Shen, “Query reformulation for dynamic information integration,” J. Intell. Inf. Syst., vol. 6, no. 2/3, pp. 99–130, 1996.
J. Huang and E. N. Efthimiadis, “Analyzing and evaluating query reformulation strategies in web search logs,” in Proceedings of the 18th ACM Conference on Information and Knowledge Management, CIKM 2009, Hong Kong, China, November 2-6, 2009, D. W. Cheung, I. Song, W. W. Chu, X. Hu, and J. Lin, Eds. ACM, 2009, pp. 77–86.
R. F. Nogueira, W. Yang, K. Cho, and J. Lin, “Multi-
[13]
[14]
[15]
[16]
[17]
[18]
[19]
[20]
stage document ranking with BERT,” CoRR, vol. abs/1910.14424, 2019.
R. F. Nogueira, Z. Jiang, R. Pradeep, and J. Lin, “Document ranking with a pretrained sequence-to-sequence model,” in EMNLP (Findings), ser. Findings of ACL, vol. EMNLP 2020. Association for Computational Linguistics, 2020, pp. 708–718.
Y. Zhu, J. Nie, Z. Dou, Z. Ma, X. Zhang, P. Du, X. Zuo, and H. Jiang, “Contrastive learning of user behavior sequence for context-aware document ranking,” in CIKM ’21: The 30th ACM International Conference on Information and Knowledge Management, Virtual Event, Queensland, Australia, November 1 - 5, 2021, G. Demartini, G. Zuccon, J. S. Culpepper, Z. Huang, and H. Tong, Eds. ACM, 2021, pp. 2780–2791.
J. Teevan, S. T. Dumais, and E. Horvitz, “Personalizing search via automated analysis of interests and activities,” in SIGIR 2005: Proceedings of the 28th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, Salvador, Brazil, August 15-19, 2005, R. A. Baeza-Yates, N. Ziviani, G. Marchionini, A. Moffat, and J. Tait, Eds. ACM, 2005, pp. 449–456.
P. N. Bennett, R. W. White, W. Chu, S. T. Dumais, P. Bailey, F. Borisyuk, and X. Cui, “Modeling the impact of short- and long-term behavior on search personalization,” in The 35th International ACM SIGIR conference on research and development in Information Retrieval, SIGIR ’12, Portland, OR, USA, August 12-16, 2012, W. R. Hersh, J. Callan, Y. Maarek, and M. Sanderson, Eds. ACM, 2012, pp. 185–194.
S. Ge, Z. Dou, Z. Jiang, J. Nie, and J. Wen, “Personalizing search results using hierarchical RNN with query-aware attention,” in Proceedings of the 27th ACM International Conference on Information and Knowledge Management, CIKM 2018, Torino, Italy, October 22-26, 2018, A. Cuzzocrea, J. Allan, N. W. Paton, D. Srivastava, R. Agrawal, A. Z. Broder, M. J. Zaki, K. S. Candan, A. Labrinidis, A. Schuster, and H. Wang, Eds. ACM, 2018, pp. 347–356.
Y. Zhou, Z. Dou, Y. Zhu, and J. Wen, “PSSL: selfsupervised learning for personalized search with contrastive sampling,” in CIKM ’21: The 30th ACM International Conference on Information and Knowledge Management, Virtual Event, Queensland, Australia, November 1 - 5, 2021, G. Demartini, G. Zuccon, J. S. Culpepper, Z. Huang, and H. Tong, Eds. ACM, 2021, pp. 2749– 2758.
J. G. Carbonell and J. Goldstein, “The use of mmr, diversity-based reranking for reordering documents and producing summaries,” in SIGIR ’98: Proceedings of the 21st Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, August 24-28 1998, Melbourne, Australia, W. B. Croft, A. Moffat, C. J. van Rijsbergen, R. Wilkinson, and J. Zobel, Eds. ACM, 1998, pp. 335–336.
R. Agrawal, S. Gollapudi, A. Halverson, and S. Ieong, “Diversifying search results,” in Proceedings of the Second International Conference on Web Search and Web Data Mining, WSDM 2009, Barcelona, Spain, February 9-11, 2009, R. Baeza-Yates, P. Boldi, B. A. Ribeiro-Neto, and
B.	B. Cambazoglu, Eds. ACM, 2009, pp. 5–14.
[21]	J. Liu, Z. Dou, X. Wang, S. Lu, and J. Wen, “DVGAN: A minimax game for search result diversification combining explicit and implicit features,” in Proceedings of the 43rd International ACM SIGIR conference on research and development in Information Retrieval, SIGIR 2020, Virtual Event, China, July 25-30, 2020, J. X. Huang, Y. Chang, X. Cheng, J. Kamps, V. Murdock, J. Wen, and Y. Liu, Eds. ACM, 2020, pp. 479–488.
[22]	Z. Su, Z. Dou, Y. Zhu, X. Qin, and J. Wen, “Modeling intent graph for search result diversification,” in SIGIR ’21: The 44th International ACM SIGIR Conference on Research and Development in Information Retrieval, Virtual Event, Canada, July 11-15, 2021, F. Diaz, C. Shah, T. Suel, P. Castells, R. Jones, and T. Sakai, Eds. ACM, 2021, pp. 736–746.
[23]	S. Borgeaud, A. Mensch, J. Hoffmann, T. Cai, E. Rutherford, K. Millican, G. van den Driessche, J. Lespiau, B. Damoc, A. Clark, D. de Las Casas, A. Guy, J. Menick, R. Ring, T. Hennigan, S. Huang, L. Maggiore, C. Jones, A. Cassirer, A. Brock, M. Paganini, G. Irving, O. Vinyals, S. Osindero, K. Simonyan, J. W. Rae, E. Elsen, and L. Sifre, “Improving language models by retrieving from trillions of tokens,” in International Conference on Machine Learning, ICML 2022, 17-23 July 2022, Baltimore, Maryland, USA, ser. Proceedings of Machine Learning Research, K. Chaudhuri, S. Jegelka, L. Song, C. Szepesva´ ri, G. Niu, and S. Sabato, Eds., vol. 162. PMLR, 2022, pp. 2206–2240.
[24]	R. Nakano, J. Hilton, S. Balaji, J. Wu, L. Ouyang, C. Kim, C. Hesse, S. Jain, V. Kosaraju, W. Saunders, X. Jiang, K. Cobbe, T. Eloundou, G. Krueger, K. Button, M. Knight, B. Chess, and J. Schulman, “Webgpt: Browser-assisted question-answering with human feedback,” CoRR, vol. abs/2112.09332, 2021.
[25]	G. Salton and M. McGill, Introduction to Modern Information Retrieval. McGraw-Hill Book Company, 1984.
[26]	G. Salton, A. Wong, and C. Yang, “A vector space model for automatic indexing,” Commun. ACM, vol. 18, no. 11, pp. 613–620, 1975.
[27]	F. Song and W. B. Croft, “A general language model for information retrieval,” in Proceedings of the 1999 ACM CIKM International Conference on Information and Knowledge Management, Kansas City, Missouri, USA, November 2-6, 1999. ACM, 1999, pp. 316–321.
[28]	J. Martineau and T. Finin, “Delta TFIDF: an improved feature space for sentiment analysis,” in Proceedings of the Third International Conference on Weblogs and Social Media, ICWSM 2009, San Jose, California, USA, May 1720, 2009, E. Adar, M. Hurst, T. Finin, N. S. Glance, N. Nicolov, and B. L. Tseng, Eds. The AAAI Press, 2009.
[29]	S. E. Robertson, S. Walker, S. Jones, M. Hancock-Beaulieu, and M. Gatford, “Okapi at TREC-3,” in Proceedings of The Third Text REtrieval Conference, TREC 1994, Gaithersburg, Maryland, USA, November 2-4, 1994, ser. NIST Special Publication, D. K. Harman, Ed., vol. 500-225. National Institute of Standards and Technology (NIST), 1994, pp. 109–126.
[30]	J. Guo, Y. Fan, Q. Ai, and W. B. Croft, “A deep
relevance matching model for ad-hoc retrieval,” in Proceedings of the 25th ACM International Conference on Information and Knowledge Management, CIKM 2016, Indianapolis, IN, USA, October 24-28, 2016, S. Mukhopadhyay, C. Zhai, E. Bertino, F. Crestani, J. Mostafa, J. Tang, L. Si, X. Zhou, Y. Chang, Y. Li, and P. Sondhi, Eds. ACM, 2016, pp. 55–64.
[31]	L. Xiong, C. Xiong, Y. Li, K. Tang, J. Liu, P. N. Bennett, J. Ahmed, and A. Overwijk, “Approximate nearest neighbor negative contrastive learning for dense text retrieval,” in 9th International Conference on Learning Representations, ICLR 2021, Virtual Event, Austria, May 3-7, 2021. OpenReview.net, 2021.
[32]	J. Lin, R. F. Nogueira, and A. Yates, Pretrained Transformers for Text Ranking: BERT and Beyond, ser. Synthesis Lectures on Human Language Technologies. Morgan & Claypool Publishers, 2021.
[33]	A. Radford, J. Wu, R. Child, D. Luan, D. Amodei, and I. Sutskever, “Language models are unsupervised multitask learners,” 2019.
[34]	T. B. Brown, B. Mann, N. Ryder, M. Subbiah, J. Kaplan, P. Dhariwal, A. Neelakantan, P. Shyam, G. Sastry, A. Askell, S. Agarwal, A. Herbert-Voss, G. Krueger, T. Henighan, R. Child, A. Ramesh, D. M. Ziegler, J. Wu, C. Winter, C. Hesse, M. Chen, E. Sigler, M. Litwin, S. Gray, B. Chess, J. Clark, C. Berner, S. Mc-Candlish, A. Radford, I. Sutskever, and D. Amodei, “Language models are few-shot learners,” in Advances in Neural Information Processing Systems 33: Annual Conference on Neural Information Processing Systems 2020, NeurIPS 2020, December 6-12, 2020, virtual, H. Larochelle, M. Ranzato, R. Hadsell, M. Balcan, and H. Lin, Eds., 2020.
[35]	H. Touvron, T. Lavril, G. Izacard, X. Martinet, M. Lachaux, T. Lacroix, B. Rozie` re, N. Goyal, E. Hambro, F. Azhar, A. Rodriguez, A. Joulin, E. Grave, and G. Lample, “Llama: Open and efficient foundation language models,” CoRR, vol. abs/2302.13971, 2023.
[36]	J. Zhang, R. Xie, Y. Hou, W. X. Zhao, L. Lin, and J. Wen, “Recommendation as instruction following: A large language model empowered recommendation approach,” CoRR, vol. abs/2305.07001, 2023.
[37]	Y. Hou, J. Zhang, Z. Lin, H. Lu, R. Xie, J. J. McAuley, and W. X. Zhao, “Large language models are zeroshot rankers for recommender systems,” CoRR, vol. abs/2305.08845, 2023.
[38]	Y. Xi, W. Liu, J. Lin, J. Zhu, B. Chen, R. Tang, W. Zhang, R. Zhang, and Y. Yu, “Towards open-world recommendation with knowledge augmentation from large language models,” CoRR, vol. abs/2306.10933, 2023.
[39]	W. Fan, Z. Zhao, J. Li, Y. Liu, X. Mei, Y. Wang, J. Tang, and Q. Li, “Recommender systems in the era of large language models (llms),” CoRR, vol. abs/2307.02046, 2023.
[40]	S. Wu, O. Irsoy, S. Lu, V. Dabravolski, M. Dredze, S. Gehrmann, P. Kambadur, D. S. Rosenberg, and G. Mann, “Bloomberggpt: A large language model for finance,” CoRR, vol. abs/2303.17564, 2023.
[41]	J. Li, Y. Liu, W. Fan, X. Wei, H. Liu, J. Tang, and Q. Li, “Empowering molecule discovery for moleculecaption translation with large language models:
A chatgpt perspective,” CoRR, vol. abs/2306.06615, 2023.
[42]	J. Wei, Y. Tay, R. Bommasani, C. Raffel, B. Zoph, S. Borgeaud, D. Yogatama, M. Bosma, D. Zhou, D. Metzler, E. H. Chi, T. Hashimoto, O. Vinyals, [55] P. Liang, J. Dean, and W. Fedus, “Emergent abilities of large language models,” Trans. Mach. Learn. Res., vol. 2022, 2022.
[43]	P. Liu, W. Yuan, J. Fu, Z. Jiang, H. Hayashi, and G. Neubig, “Pre-train, prompt, and predict: A systematic survey of prompting methods in natural language processing,” ACM Comput. Surv., vol. 55, no. 9, pp. 195:1–195:35, 2023.
[44]	X. Qiu, T. Sun, Y. Xu, Y. Shao, N. Dai, and X. Huang, [56] “Pre-trained models for natural language processing: A survey,” CoRR, vol. abs/2003.08271, 2020.
[45]	Y. Cao, S. Li, Y. Liu, Z. Yan, Y. Dai, P. S. Yu, and L. Sun, “A comprehensive survey of ai-generated content (AIGC): A history of generative AI from GAN to chatgpt,” CoRR, vol. abs/2303.04226, 2023.
[46]	J. Li, T. Tang, W. X. Zhao, and J. Wen, “Pretrained language model for text generation: A survey,” in Proceedings of the Thirtieth International Joint Conference [57] on Artificial Intelligence, IJCAI 2021, Virtual Event / Montreal, Canada, 19-27 August 2021, Z. Zhou, Ed. ijcai.org, 2021, pp. 4492–4499.
[47]	Q. Dong, L. Li, D. Dai, C. Zheng, Z. Wu, B. Chang, X. Sun, J. Xu, L. Li, and Z. Sui, “A survey for in-context learning,” CoRR, vol. abs/2301.00234, 2023.
[48]	J. Huang and K. C. Chang, “Towards reasoning in large language models: A survey,” in Findings of the Association for Computational Linguistics: ACL 2023,	[58]
Toronto, Canada, July 9-14, 2023, A. Rogers, J. L. Boyd-Graber, and N. Okazaki, Eds. Association for Computational Linguistics, 2023, pp. 1049–1065.
[49]	W. X. Zhao, K. Zhou, J. Li, T. Tang, X. Wang, Y. Hou, Y. Min, B. Zhang, J. Zhang, Z. Dong, Y. Du, C. Yang, [59] Y. Chen, Z. Chen, J. Jiang, R. Ren, Y. Li, X. Tang, Z. Liu, P. Liu, J. Nie, and J. Wen, “A survey of large language models,” CoRR, vol. abs/2303.18223, 2023.
[50]	Q. Ai, T. Bai, Z. Cao, Y. Chang, J. Chen, Z. Chen, [60] Z. Cheng, S. Dong, Z. Dou, F. Feng, S. Gao, J. Guo, X. He, Y. Lan, C. Li, Y. Liu, Z. Lyu, W. Ma, J. Ma, Z. Ren, P. Ren, Z. Wang, M. Wang, J. Wen, L. Wu, X. Xin, J. Xu, D. Yin, P. Zhang, F. Zhang, W. Zhang, M. Zhang, and X. Zhu, “Information retrieval meets large language models: A strategic report from chinese IR community,” CoRR, vol. abs/2307.09751, 2023.
[51]	X. Liu and W. B. Croft, “Statistical language modeling for information retrieval,” Annu. Rev. Inf. Sci. Technol., vol. 39, no. 1, pp. 1–31, 2005.
[52]	B. Mitra and N. Craswell, “Neural models for information retrieval,” CoRR, vol. abs/1705.01509, 2017.
[53]	W. X. Zhao, J. Liu, R. Ren, and J. Wen, “Dense text [61] retrieval based on pretrained language models: A survey,” CoRR, vol. abs/2211.14876, 2022.
[54]	M. E. Peters, M. Neumann, M. Iyyer, M. Gardner, C. Clark, K. Lee, and L. Zettlemoyer, “Deep contextualized word representations,” in Proceedings of the [62] 2018 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language
Technologies, NAACL-HLT 2018, New Orleans, Louisiana, USA, June 1-6, 2018, Volume 1 (Long Papers), M. A. Walker, H. Ji, and A. Stent, Eds. Association for Computational Linguistics, 2018, pp. 2227–2237.
J. Devlin, M. Chang, K. Lee, and K. Toutanova, “BERT: pre-training of deep bidirectional transformers for language understanding,” in Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, NAACL-HLT 2019, Minneapolis, MN, USA, June 2-7, 2019, Volume 1 (Long and Short Papers), J. Burstein, C. Doran, and T. Solorio, Eds. Association for Computational Linguistics, 2019, pp. 4171–4186.
A. Vaswani, N. Shazeer, N. Parmar, J. Uszkoreit, L. Jones, A. N. Gomez, L. Kaiser, and I. Polosukhin, “Attention is all you need,” in Advances in Neural Information Processing Systems 30: Annual Conference on Neural Information Processing Systems 2017, December 4-9, 2017, Long Beach, CA, USA, I. Guyon, U. von Luxburg, S. Bengio, H. M. Wallach, R. Fergus, S. V. N. Vishwanathan, and R. Garnett, Eds., 2017, pp. 5998– 6008.
M. Lewis, Y. Liu, N. Goyal, M. Ghazvininejad, A. Mohamed, O. Levy, V. Stoyanov, and L. Zettlemoyer, “BART: denoising sequence-to-sequence pre-training for natural language generation, translation, and comprehension,” in Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, ACL 2020, Online, July 5-10, 2020, D. Jurafsky, J. Chai, N. Schluter, and J. R. Tetreault, Eds. Association for Computational Linguistics, 2020, pp. 7871–7880.
C.	Raffel, N. Shazeer, A. Roberts, K. Lee, S. Narang, M. Matena, Y. Zhou, W. Li, and P. J. Liu, “Exploring the limits of transfer learning with a unified text-to-text transformer,” J. Mach. Learn. Res., vol. 21, pp. 140:1–140:67, 2020.
J. Kaplan, S. McCandlish, T. Henighan, T. B. Brown, B. Chess, R. Child, S. Gray, A. Radford, J. Wu, and D. Amodei, “Scaling laws for neural language models,” CoRR, vol. abs/2001.08361, 2020.
A. Clark, D. de Las Casas, A. Guy, A. Mensch, M. Paganini, J. Hoffmann, B. Damoc, B. A. Hecht-man, T. Cai, S. Borgeaud, G. van den Driessche, E. Rutherford, T. Hennigan, M. J. Johnson, A. Cassirer, C. Jones, E. Buchatskaya, D. Budden, L. Sifre, S. Osin-dero, O. Vinyals, M. Ranzato, J. W. Rae, E. Elsen, K. Kavukcuoglu, and K. Simonyan, “Unified scaling laws for routed language models,” in International Conference on Machine Learning, ICML 2022, 17-23 July 2022, Baltimore, Maryland, USA, ser. Proceedings of Machine Learning Research, K. Chaudhuri, S. Jegelka, L. Song, C. Szepesva´ ri, G. Niu, and S. Sabato, Eds., vol. 162. PMLR, 2022, pp. 4057–4086.
E.	J. Hu, Y. Shen, P. Wallis, Z. Allen-Zhu, Y. Li, S. Wang, L. Wang, and W. Chen, “Lora: Low-rank adaptation of large language models,” in The Tenth International Conference on Learning Representations, ICLR 2022, Virtual Event, April 25-29, 2022. OpenReview.net, 2022.
X.	L. Li and P. Liang, “Prefix-tuning: Optimizing continuous prompts for generation,” in Proceedings of the 59th Annual Meeting of the Association for Com-
[63]
[64]
[65]
[66]
[67]
[68]
[69]
[70]
[71]
[72]
[73]
[74]
[75]
[76]
putational Linguistics and the 11th International Joint Conference on Natural Language Processing, ACL/IJCNLP 2021, (Volume 1: Long Papers), Virtual Event, August 16, 2021, C. Zong, F. Xia, W. Li, and R. Navigli, Eds. Association for Computational Linguistics, 2021, pp. 4582–4597.
B. Lester, R. Al-Rfou, and N. Constant, “The power of scale for parameter-efficient prompt tuning,” in Proceedings of the 2021 Conference on Empirical Methods in Natural Language Processing, EMNLP 2021, Virtual Event / Punta Cana, Dominican Republic, 7-11 November, 2021, M. Moens, X. Huang, L. Specia, and S. W. Yih, Eds. Association for Computational Linguistics, 2021, pp. 3045–3059.
T. Dettmers, A. Pagnoni, A. Holtzman, and L. Zettle-moyer, “Qlora: Efficient finetuning of quantized llms,” CoRR, vol. abs/2305.14314, 2023.
L. Wang, N. Yang, and F. Wei, “Query2doc: Query expansion with large language models,” pp. 9414– 9423, 2023.
H. K. Azad and A. Deepak, “Query expansion techniques for information retrieval: A survey,” Inf. Process. Manag., vol. 56, no. 5, pp. 1698–1735, 2019.
H. J. Peat and P. Willett, “The limitations of term co-occurrence data for query expansion in document retrieval systems,” J. Am. Soc. Inf. Sci., vol. 42, no. 5, pp. 378–383, 1991.
C. Fellbaum, “Wordnet: An electronic lexical database,” MIT Press google schola, vol. 2, pp. 678–686, 1998.
E. A. Fox, “Lexical relations: Enhancing effectiveness of information retrieval systems,” SIGIR Forum, vol. 15, no. 3, pp. 5–36, 1980.
H. Zohar, C. Liebeskind, J. Schler, and I. Dagan, “Automatic thesaurus construction for cross generation corpus,” ACM Journal on Computing and Cultural Heritage, vol. 6, no. 1, pp. 4:1–4:19, 2013.
S. Gauch, J. Wang, and S. M. Rachakonda, “A corpus analysis approach for automatic query expansion and its extension to multiple databases,” ACM Trans. Inf. Syst., vol. 17, no. 3, pp. 250–269, 1999.
Y. Li, W. P. R. Luk, K. S. E. Ho, and F. L. K. Chung, “Improving weak ad-hoc queries using wikipedia asexternal corpus,” in Proceedings of the 30th annual international ACM SIGIR conference on Research and development in information retrieval, 2007, pp. 797–798.
C. Xiong and J. Callan, “Query expansion with free-base,” in Proceedings of the 2015 International Conference on The Theory of Information Retrieval, ICTIR 2015, Northampton, Massachusetts, USA, September 2730, 2015, J. Allan, W. B. Croft, A. P. de Vries, and C. Zhai, Eds. ACM, 2015, pp. 111–120.
J. Singh and A. Sharan, “A new fuzzy logic-based query expansion model for efficient information retrieval using relevance feedback approach,” Neural Comput. Appl., vol. 28, no. 9, pp. 2557–2580, 2017.
L. Gao, X. Ma, J. Lin, and J. Callan, “Precise zero-shot dense retrieval without relevance labels,” CoRR, vol. abs/2212.10496, 2022.
R. Jagerman, H. Zhuang, Z. Qin, X. Wang, and M. Bendersky, “Query expansion by prompting large lan-
[77]
[78]
[79]
[80]
[81]
[82]
[83]
[84]
[85]
[86]
[87]
[88]
[89]
guage models,” CoRR, vol. abs/2305.03653, 2023.
I. Baek, J. Lee, J. Yang, and H. Lee, “Crafting the path: Robust query rewriting for information retrieval,” CoRR, vol. abs/2407.12529, 2024.
M. Alaofi, L. Gallagher, M. Sanderson, F. Scholer, and P. Thomas, “Can generative llms create query variants for test collections? an exploratory study,” in Proceedings of the 46th International ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR 2023, Taipei, Taiwan, July 23-27, 2023, H. Chen, W. E. Duh, H. Huang, M. P. Kato, J. Mothe, and B. Poblete, Eds. ACM, 2023, pp. 1869–1873.
M. Li, H. Zhuang, K. Hui, Z. Qin, J. Lin, R. Jager-man, X. Wang, and M. Bendersky, “Can query expansion improve generalization of strong cross-encoder rankers?” in Proceedings of the 47th International ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR 2024, Washington DC, USA, July 14-18, 2024, G. H. Yang, H. Wang, S. Han, C. Hauff, G. Zuccon, and Y. Zhang, Eds. ACM, 2024, pp. 2321– 2326.
X. Ma, Y. Gong, P. He, H. Zhao, and N. Duan, “Query rewriting for retrieval-augmented large language models,” CoRR, vol. abs/2305.14283, 2023.
W. Peng, G. Li, Y. Jiang, Z. Wang, D. Ou, X. Zeng, D. Xu, T. Xu, and E. Chen, “Large language model based long-tail query rewriting in taobao search,” CoRR, vol. abs/2311.03758, 2023.
I. Mackie, S. Chatterjee, and J. Dalton, “Generative and pseudo-relevant feedback for sparse, dense and learned sparse retrieval,” CoRR, vol. abs/2305.07477, 2023.
I. Mackie, I. Sekulic, S. Chatterjee, J. Dalton, and F. Crestani, “GRM: generative relevance modeling using relevance-aware sample estimation for document retrieval,” CoRR, vol. abs/2306.09938, 2023.
J. Feng, C. Tao, X. Geng, T. Shen, C. Xu, G. Long, D. Zhao, and D. Jiang, “Knowledge refinement via interaction between search engines and large language models,” CoRR, vol. abs/2305.07402, 2023.
T. Shen, G. Long, X. Geng, C. Tao, T. Zhou, and D. Jiang, “Large language models are strong zero-shot retriever,” CoRR, vol. abs/2304.14233, 2023.
Y. Lei, Y. Cao, T. Zhou, T. Shen, and A. Yates, “Corpus-steered query expansion with large language models,” in Proceedings of the 18th Conference of the European Chapter of the Association for Computational Linguistics, EACL 2024 - Volume 2: Short Papers, St. Julian’s, Malta, March 17-22, 2024, Y. Graham and M. Purver, Eds. Association for Computational Linguistics, 2024, pp. 393–401.
A. Anand, V. V, V. Setty, and A. Anand, “Context aware query rewriting for text rankers using LLM,” CoRR, vol. abs/2308.16753, 2023.
S. Mao, Y. Jiang, B. Chen, X. Li, P. Wang, X. Wang, P. Xie, F. Huang, H. Chen, and N. Zhang, “Rafe: Ranking feedback improves query rewriting for RAG,” CoRR, vol. abs/2405.14431, 2024.
K. Mao, Z. Dou, F. Mo, J. Hou, H. Chen, and H. Qian, “Large language models know your contextual search intent: A prompting framework for conversational
search,” in Findings of the Association for Computational Linguistics: EMNLP 2023, Singapore, December 6-10, 2023, H. Bouamor, J. Pino, and K. Bali, Eds. Association for Computational Linguistics, 2023, pp. 1211– 1225.
[90]	C. Huang, C. Hsu, T. Hsu, C. Li, and Y. Chen, “CON-VERSER: few-shot conversational dense retrieval with synthetic data generation,” in Proceedings of the 24th Meeting of the Special Interest Group on Discourse and Dialogue, SIGDIAL 2023, Prague, Czechia, September 11 - 15, 2023, D. Schlangen, S. Stoyanchev, S. Joty, O. Dusek, C. Kennington, and M. Alikhani, Eds. Association for Computational Linguistics, 2023, pp. 381–387.
[91]	F. Ye, M. Fang, S. Li, and E. Yilmaz, “Enhancing conversational search: Large language model-aided informative query rewriting,” in Findings of the Association for Computational Linguistics: EMNLP 2023, Singapore, December 6-10, 2023, H. Bouamor, J. Pino, and K. Bali, Eds. Association for Computational Linguistics, 2023, pp. 5985–6006.
[92]	K. Mao, Z. Dou, H. Qian, F. Mo, X. Cheng, and Z. Cao, “Convtrans: Transforming web search sessions for conversational dense retrieval,” in Proceedings of the 2022 Conference on Empirical Methods in Natural Language Processing, EMNLP 2022, Abu Dhabi, United Arab Emirates, December 7-11, 2022, Y. Goldberg, Z. Kozareva, and Y. Zhang, Eds. Association for Computational Linguistics, 2022, pp. 2935–2946.
[93]	Z. Dai, A. T. Chaganty, V. Y. Zhao, A. Amini, Q. M. Rashid, M. Green, and K. Guu, “Dialog inpainting: Turning documents into dialogs,” in International Conference on Machine Learning, ICML 2022, 17-23 July 2022, Baltimore, Maryland, USA, ser. Proceedings of Machine Learning Research, K. Chaudhuri, S. Jegelka, L. Song, C. Szepesva´ ri, G. Niu, and S. Sabato, Eds., vol. 162. PMLR, 2022, pp. 4558–4586.
[94]	K. D. Dhole, R. Chandradevan, and E. Agichtein, “An interactive query generation assistant using llm-based prompt modification and user feedback,” CoRR, vol. abs/2311.11226, 2023.
[95]	C. Deng, K. Mao, and Z. Dou, “Learning interpretable legal case retrieval via knowledge-guided case reformulation,” CoRR, vol. abs/2406.19760, 2024.
[96]	M. Li, H. Zhuang, K. Hui, Z. Qin, J. Lin, R. Jager-man, X. Wang, and M. Bendersky, “Generate, filter, and fuse: Query expansion via multi-step keyword generation for zero-shot neural rankers,” CoRR, vol. abs/2311.09175, 2023.
[97]	J. Wei, X. Wang, D. Schuurmans, M. Bosma, B. Ichter, F. Xia, E. H. Chi, Q. V. Le, and D. Zhou, “Chain-of-thought prompting elicits reasoning in large language models,” in NeurIPS, 2022.
[98]	W. Yu, D. Iter, S. Wang, Y. Xu, M. Ju, S. Sanyal, C. Zhu, M. Zeng, and M. Jiang, “Generate rather than retrieve: Large language models are strong context generators,” in The Eleventh International Conference on Learning Representations, ICLR 2023, Kigali, Rwanda, May 1-5, 2023. OpenReview.net, 2023.
[99]	T. Nguyen, M. Rosenberg, X. Song, J. Gao, S. Tiwary, R. Majumder, and L. Deng, “MS MARCO: A human
generated machine reading comprehension dataset,” in CoCo@NIPS, ser. CEUR Workshop Proceedings, vol. 1773. CEUR-WS.org, 2016.
[100]	T. Kwiatkowski, J. Palomaki, O. Redfield, M. Collins, A. P. Parikh, C. Alberti, D. Epstein, I. Polosukhin, J. Devlin, K. Lee, K. Toutanova, L. Jones, M. Kelcey, M. Chang, A. M. Dai, J. Uszkoreit, Q. Le, and S. Petrov, “Natural questions: a benchmark for question answering research,” Trans. Assoc. Comput. Linguistics, vol. 7, pp. 452–466, 2019.
[101]	R. Rafailov, A. Sharma, E. Mitchell, C. D. Manning, S. Ermon, and C. Finn, “Direct preference optimization: Your language model is secretly a reward model,” in Advances in Neural Information Processing Systems 36: Annual Conference on Neural Information Processing Systems 2023, NeurIPS 2023, New Orleans, LA, USA, December 10 - 16, 2023, A. Oh, T. Naumann, A. Globerson, K. Saenko, M. Hardt, and S. Levine, Eds., 2023.
[102]	O. Weller, K. Lo, D. Wadden, D. J. Lawrie, B. V. Durme, A. Cohan, and L. Soldaini, “When do generative query and document expansions fail? A comprehensive study across methods, retrievers, and datasets,” CoRR, vol. abs/2309.08541, 2023.
[103]	L. H. Bonifacio, H. Abonizio, M. Fadaee, and R. F. Nogueira, “Inpars: Data augmentation for information retrieval using large language models,” CoRR, vol. abs/2202.05144, 2022.
[104]	G. Ma, X. Wu, P. Wang, Z. Lin, and S. Hu, “Pretraining with large language model-based document expansion for dense passage retrieval,” CoRR, vol. abs/2308.08285, 2023.
[105]	V. Jeronymo, L. H. Bonifacio, H. Abonizio, M. Fadaee, R. de Alencar Lotufo, J. Zavrel, and R. F. Nogueira, “Inpars-v2: Large language models as efficient dataset generators for information retrieval,” CoRR, vol. abs/2301.01820, 2023.
[106]	Z. Dai, V. Y. Zhao, J. Ma, Y. Luan, J. Ni, J. Lu, A. Bakalov, K. Guu, K. B. Hall, and M. Chang, “Promptagator: Few-shot dense retrieval from 8 examples,” in ICLR. OpenReview.net, 2023.
[107]	R. Meng, Y. Liu, S. Yavuz, D. Agarwal, L. Tu, N. Yu, J. Zhang, M. Bhat, and Y. Zhou, “Augtriever: Unsupervised dense retrieval by scalable data augmentation,” 2023.
[108]	J. Saad-Falcon, O. Khattab, K. Santhanam, R. Florian, M. Franz, S. Roukos, A. Sil, M. A. Sultan, and C. Potts, “UDAPDR: unsupervised domain adaptation via LLM prompting and distillation of rerankers,” in Proceedings of the 2023 Conference on Empirical Methods in Natural Language Processing, EMNLP 2023, Singapore, December 6-10, 2023, H. Bouamor, J. Pino, and K. Bali, Eds. Association for Computational Linguistics, 2023, pp. 11 265–11 279.
[109]	Z. Peng, X. Wu, and Y. Fang, “Soft prompt tuning for augmenting dense retrieval with large language models,” 2023.
[110]	J. Lee, Z. Dai, X. Ren, B. Chen, D. Cer, J. R. Cole, K. Hui, M. Boratko, R. Kapadia, W. Ding, Y. Luan, S. M. K. Duddu, G. H. A´ brego, W. Shi, N. Gupta, A. Kusupati, P. Jain, S. R. Jonnalagadda, M. Chang,
and I. Naim, “Gecko: Versatile text embeddings distilled from large language models,” CoRR, vol. abs/2403.20327, 2024.
[111]	D. S. Sachan, M. Lewis, D. Yogatama, L. Zettlemoyer, J. Pineau, and M. Zaheer, “Questions are all you need to train a dense passage retriever,” Transactions of the Association for Computational Linguistics, vol. 11, pp. 600–616, 2023.
[112]	L. Wang, N. Yang, X. Huang, L. Yang, R. Majumder, and F. Wei, “Improving text embeddings with large language models,” in Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), ACL 2024, Bangkok, Thailand, August 11-16, 2024, L. Ku, A. Martins, and V. Srikumar, Eds. Association for Computational Linguistics, 2024, pp. 11 897–11 916.
[113]	N. Thakur, N. Reimers, A. Ru¨ ckle´, A. Srivastava, and I. Gurevych, “BEIR: A heterogeneous benchmark for zero-shot evaluation of information retrieval models,” in NeurIPS Datasets and Benchmarks, 2021.
[114]	N. Thakur, J. Ni, G. H. A´ brego, J. Wieting, J. Lin, and D. Cer, “Leveraging llms for synthesizing training data across many languages in multilingual dense retrieval,” CoRR, vol. abs/2311.05800, 2023.
[115]	A. Neelakantan, T. Xu, R. Puri, A. Radford, J. M. Han, J. Tworek, Q. Yuan, N. Tezak, J. W. Kim, C. Hal-lacy, J. Heidecke, P. Shyam, B. Power, T. E. Nekoul, G. Sastry, G. Krueger, D. Schnurr, F. P. Such, K. Hsu, M. Thompson, T. Khan, T. Sherbakov, J. Jang, P. Welin-der, and L. Weng, “Text and code embeddings by contrastive pre-training,” CoRR, vol. abs/2201.10005, 2022.
[116]	J. Ni, C. Qu, J. Lu, Z. Dai, G. H. A´ brego, J. Ma, V. Y. Zhao, Y. Luan, K. B. Hall, M. Chang, and Y. Yang, “Large dual encoders are generalizable retrievers,” in EMNLP. Association for Computational Linguistics, 2022, pp. 9844–9855.
[117]	N. Muennighoff, “SGPT: GPT sentence embeddings for semantic search,” CoRR, vol. abs/2202.08904, 2022.
[118]	B. Peng, C. Li, P. He, M. Galley, and J. Gao, “Instruction tuning with GPT-4,” CoRR, vol. abs/2304.03277, 2023.
[119]	A. Q. Jiang, A. Sablayrolles, A. Mensch, C. Bamford, D. S. Chaplot, D. de Las Casas, F. Bressand, G. Lengyel, G. Lample, L. Saulnier, L. R. Lavaud, M. Lachaux, P. Stock, T. L. Scao, T. Lavril, T. Wang, T. Lacroix, and W. E. Sayed, “Mistral 7b,” CoRR, vol. abs/2310.06825, 2023.
[120]	S. Gunasekar, Y. Zhang, J. Aneja, C. C. T. Mendes, A. D. Giorno, S. Gopi, M. Javaheripi, P. Kauffmann, G. de Rosa, O. Saarikivi, A. Salim, S. Shah, H. S. Behl, X. Wang, S. Bubeck, R. Eldan, A. T. Kalai, Y. T. Lee, and Y. Li, “Textbooks are all you need,” CoRR, vol. abs/2306.11644, 2023.
[121]	T. Mesnard, C. Hardin, R. Dadashi, S. Bhupatiraju, S. Pathak, L. Sifre, M. Rivie` re, M. S. Kale, J. Love, P. Tafti, L. Hussenot, A. Chowdhery, A. Roberts, A. Barua, A. Botev, A. Castro-Ros, A. Slone, A. He´ liou, A. Tacchetti, A. Bulanova, A. Paterson, B. Tsai, B. Shahriari, C. L. Lan, C. A. Choquette-Choo, C. Crepy, D. Cer, D. Ippolito, D. Reid, E. Buchatskaya,
E. Ni, E. Noland, G. Yan, G. Tucker, G. Mu-raru, G. Rozhdestvenskiy, H. Michalewski, I. Tenney, I. Grishchenko, J. Austin, J. Keeling, J. Labanowski, J. Lespiau, J. Stanway, J. Brennan, J. Chen, J. Ferret, J. Chiu, and et al., “Gemma: Open models based on gemini research and technology,” CoRR, vol. abs/2403.08295, 2024.
[122]	X. Ma, L. Wang, N. Yang, F. Wei, and J. Lin, “Finetuning llama for multi-stage text retrieval,” CoRR, vol. abs/2310.08319, 2023.
[123]	R. Meng, Y. Liu, S. R. Joty, C. Xiong, Y. Zhou, and S. Yavuz, “Sfr-embedding-mistral: Enhance text retrieval with transfer learning,” Salesforce AI Research Blog, 2024.
[124]	J. Kim, S. Lee, J. Kwon, S. Gu, Y. Kim, M. Cho, and C. C. Jy-yong Sohn, “Linq-embed-mistral: Elevating text retrieval with improved gpt data through taskspecific control and quality refinement,” Linq AI Research Blog, 2024.
[125]	N. Muennighoff, N. Tazi, L. Magne, and N. Reimers, “MTEB: massive text embedding benchmark,” in Proceedings of the 17th Conference of the European Chapter of the Association for Computational Linguistics, EACL 2023, Dubrovnik, Croatia, May 2-6, 2023, A. Vlachos and I. Augenstein, Eds. Association for Computational Linguistics, 2023, pp. 2006–2029.
[126]	C. Li, Z. Liu, S. Xiao, and Y. Shao, “Making large language models A better foundation for dense retrieval,” CoRR, vol. abs/2312.15503, 2023.
[127]	C. Lee, R. Roy, M. Xu, J. Raiman, M. Shoeybi, B. Catanzaro, and W. Ping, “Nv-embed: Improved techniques for training llms as generalist embedding models,” CoRR, vol. abs/2405.17428, 2024.
[128]	H. Su, W. Shi, J. Kasai, Y. Wang, Y. Hu, M. Ostendorf, W. Yih, N. A. Smith, L. Zettlemoyer, and T. Yu, “One embedder, any task: Instruction-finetuned text embeddings,” in Findings of the Association for Computational Linguistics: ACL 2023, Toronto, Canada, July 9-14, 2023, A. Rogers, J. L. Boyd-Graber, and N. Okazaki, Eds. Association for Computational Linguistics, 2023, pp. 1102–1121.
[129]	A. Asai, T. Schick, P. S. H. Lewis, X. Chen, G. Izac-ard, S. Riedel, H. Hajishirzi, and W. Yih, “Task-aware retrieval with instructions,” in Findings of the Association for Computational Linguistics: ACL 2023, Toronto, Canada, July 9-14, 2023, A. Rogers, J. L. Boyd-Graber, and N. Okazaki, Eds. Association for Computational Linguistics, 2023, pp. 3650–3675.
[130]	K. Luo, M. Qin, S. Xiao, Z. Liu, J. Zhao, and K. Liu, “Large language models as foundations for next-gen dense retrieval: A comprehensive empirical assessment,” CoRR, vol. abs/2408.12194, 2024.
[131]	K. Mao, C. Deng, H. Chen, F. Mo, Z. Liu, T. Sakai, and Z. Dou, “Chatretriever: Adapting large language models for generalized and robust conversational dense retrieval,” CoRR, vol. abs/2404.13556, 2024.
[132]	T. Jiang, S. Huang, Z. Luan, D. Wang, and F. Zhuang, “Scaling sentence embeddings with large language models,” CoRR, vol. abs/2307.16645, 2023.
[133]	D. Metzler, Y. Tay, D. Bahri, and M. Najork, “Rethinking search: making domain experts out of dilettantes,”
SIGIR Forum, vol. 55, no. 1, pp. 13:1–13:27, 2021.
[134]	Y. Zhou, J. Yao, Z. Dou, L. Wu, and J. Wen, “Dynamicretriever: A pre-trained model-based IR system without an explicit index,” Mach. Intell. Res., vol. 20, no. 2, pp. 276–288, 2023.
[135]	J. Chen, R. Zhang, J. Guo, Y. Liu, Y. Fan, and X. Cheng, “Corpusbrain: Pre-train a generative retrieval model for knowledge-intensive language tasks,” in Proceedings of the 31st ACM International Conference on Information & Knowledge Management, Atlanta, GA, USA, October 17-21, 2022, M. A. Hasan and L. Xiong, Eds. ACM, 2022, pp. 191–200.
[136]	Y. Tay, V. Tran, M. Dehghani, J. Ni, D. Bahri, H. Mehta, Z. Qin, K. Hui, Z. Zhao, J. P. Gupta, T. Schuster, W. W. Cohen, and D. Metzler, “Transformer memory as a differentiable search index,” in NeurIPS, 2022.
[137]	N. Ziems, W. Yu, Z. Zhang, and M. Jiang, “Large language models are built-in autoregressive search engines,” in Findings of the Association for Computational Linguistics: ACL 2023, Toronto, Canada, July 9-14, 2023, A. Rogers, J. L. Boyd-Graber, and N. Okazaki, Eds. Association for Computational Linguistics, 2023, pp. 2666–2678.
[138]	Y. Wang, Y. Hou, H. Wang, Z. Miao, S. Wu, Q. Chen, Y. Xia, C. Chi, G. Zhao, Z. Liu, X. Xie, H. Sun, W. Deng, Q. Zhang, and M. Yang, “A neural corpus indexer for document retrieval,” in Advances in Neural Information Processing Systems 35: Annual Conference on Neural Information Processing Systems 2022, NeurIPS 2022, New Orleans, LA, USA, November 28 - December 9, 2022, S. Koyejo, S. Mohamed, A. Agarwal, D. Belgrave, K. Cho, and A. Oh, Eds., 2022.
[139]	M. Bevilacqua, G. Ottaviano, P. S. H. Lewis, S. Yih, S. Riedel, and F. Petroni, “Autoregressive search engines: Generating substrings as document identifiers,” in Advances in Neural Information Processing Systems 35: Annual Conference on Neural Information Processing Systems 2022, NeurIPS 2022, New Orleans, LA, USA, November 28 - December 9, 2022, S. Koyejo, S. Mohamed, A. Agarwal, D. Belgrave, K. Cho, and A. Oh, Eds., 2022.
[140]	R. Pradeep, K. Hui, J. Gupta, A´ . D. Lelkes, H. Zhuang, J. Lin, D. Metzler, and V. Q. Tran, “How does generative retrieval scale to millions of passages?” in Proceedings of the 2023 Conference on Empirical Methods in Natural Language Processing, EMNLP 2023, Singapore, December 6-10, 2023, H. Bouamor, J. Pino, and K. Bali, Eds. Association for Computational Linguistics, 2023, pp. 1305–1321.
[141]	X. Li, Z. Dou, Y. Zhou, and F. Liu, “Corpuslm: Towards a unified language model on corpus for knowledge-intensive tasks,” in Proceedings of the 47th International ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR 2024, Washington DC, USA, July 14-18, 2024, G. H. Yang, H. Wang, S. Han, C. Hauff, G. Zuccon, and Y. Zhang, Eds. ACM, 2024, pp. 26–37.
[142]	J. Ju, J. Yang, and C. Wang, “Text-to-text multi-view learning for passage re-ranking,” in SIGIR.	ACM,
2021, pp. 1803–1807.
[143]	R. Pradeep, R. F. Nogueira, and J. Lin, “The expando-
mono-duo design pattern for text ranking with pretrained sequence-to-sequence models,” CoRR, vol. abs/2101.05667, 2021.
[144]	H. Zhuang, Z. Qin, R. Jagerman, K. Hui, J. Ma, J. Lu, J. Ni, X. Wang, and M. Bendersky, “Rankt5: Finetuning T5 for text ranking with ranking losses,” in Proceedings of the 46th International ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR 2023, Taipei, Taiwan, July 23-27, 2023, H. Chen, W. E. Duh, H. Huang, M. P. Kato, J. Mothe, and B. Poblete, Eds. ACM, 2023, pp. 2308–2313.
[145]	S. Yoon, E. Choi, J. Kim, H. Yun, Y. Kim, and S. Hwang, “Listt5: Listwise reranking with fusion-in-decoder improves zero-shot retrieval,” in ACL (1). Association for Computational Linguistics, 2024, pp. 2287–2308.
[146]	L. Zhang, Y. Zhang, D. Long, P. Xie, M. Zhang, and M. Zhang, “A two-stage adaptation of large language models for text ranking,” in Findings of the Association for Computational Linguistics ACL 2024, L.-W. Ku, A. Martins, and V. Srikumar, Eds. Bangkok, Thailand and virtual meeting: Association for Computational Linguistics, Aug. 2024, pp. 11 880–11 891.
[147]	Z. Peng, X. Wu, Q. Wang, S. Rajanala, and Y. Fang, “Q-PEFT: query-dependent parameter efficient finetuning for text reranking with large language models,” CoRR, vol. abs/2404.04522, 2024.
[148]	X. Zhang, S. Hofsta¨ tter, P. Lewis, R. Tang, and J. Lin, “Rank-without-gpt: Building gpt-independent listwise rerankers on open-source large language models,” arXiv preprint arXiv:2312.02969, 2023.
[149]	Q. Liu, B. Wang, N. Wang, and J. Mao, “Leveraging passage embeddings for efficient listwise reranking with large language models,” CoRR, vol. abs/2406.14848, 2024.
[150]	P. Liang, R. Bommasani, T. Lee, D. Tsipras, D. Soylu, M. Yasunaga, Y. Zhang, D. Narayanan, Y. Wu, A. Kumar, B. Newman, B. Yuan, B. Yan, C. Zhang, C. Cosgrove, C. D. Manning, C. Re´ , D. Acosta-Navas, D. A. Hudson, E. Zelikman, E. Durmus, F. Ladhak, F. Rong, H. Ren, H. Yao, J. Wang, K. Santhanam, L. J. Orr, L. Zheng, M. Yu¨ ksekgo¨ nu¨ l, M. Suzgun, N. Kim, N. Guha, N. S. Chatterji, O. Khattab, P. Henderson, Q. Huang, R. Chi, S. M. Xie, S. Santurkar, S. Gan-guli, T. Hashimoto, T. Icard, T. Zhang, V. Chaudhary, W. Wang, X. Li, Y. Mai, Y. Zhang, and Y. Koreeda, “Holistic evaluation of language models,” CoRR, vol. abs/2211.09110, 2022.
[151]	H. Zhuang, Z. Qin, K. Hui, J. Wu, L. Yan, X. Wang, and M. Bendersky, “Beyond yes and no: Improving zeroshot LLM rankers via scoring fine-grained relevance labels,” CoRR, vol. abs/2310.14122, 2023.
[152]	F. Guo, W. Li, H. Zhuang, Y. Luo, Y. Li, L. Yan, and Y. Zhang, “Generating diverse criteria on-the-fly to improve point-wise LLM rankers,” CoRR, vol. abs/2404.11960, 2024.
[153]	D. S. Sachan, M. Lewis, M. Joshi, A. Aghajanyan, W. Yih, J. Pineau, and L. Zettlemoyer, “Improving passage retrieval with zero-shot question generation,” in EMNLP. Association for Computational Linguistics, 2022, pp. 3781–3797.
[154]	S. Zhuang, B. Liu, B. Koopman, and G. Zuccon,
“Open-source large language models are strong zeroshot query likelihood models for document ranking,” in Findings of the Association for Computational Linguistics: EMNLP 2023, Singapore, December 6-10, 2023, H. Bouamor, J. Pino, and K. Bali, Eds. Association for Computational Linguistics, 2023, pp. 8807–8817.
[155]	S. Sun, S. Zhuang, S. Wang, and G. Zuccon, “An investigation of prompt variations for zero-shot llm-based rankers,” CoRR, vol. abs/2406.14117, 2024.
[156]	S. Cho, S. Jeong, J. Seo, and J. C. Park, “Discrete prompt optimization via constrained generation for zero-shot re-ranker,” in ACL (Findings). Association for Computational Linguistics, 2023, pp. 960–971.
[157]	W. Liu, Y. Zhu, and Z. Dou, “Demorank: Selecting effective demonstrations for large language models in ranking task,” CoRR, vol. abs/2406.16332, 2024.
[158]	A. Drozdov, H. Zhuang, Z. Dai, Z. Qin, R. Rahimi, X. Wang, D. Alon, M. Iyyer, A. McCallum, D. Metzler, and K. Hui, “PaRaDe: Passage ranking using demonstrations with LLMs,” in Findings of the Association for Computational Linguistics: EMNLP 2023, H. Bouamor, J. Pino, and K. Bali, Eds. Singapore: Association for Computational Linguistics, Dec. 2023, pp. 14 242– 14 252.
[159]	W. Sun, L. Yan, X. Ma, S. Wang, P. Ren, Z. Chen, D. Yin, and Z. Ren, “Is chatgpt good at search? investigating large language models as re-ranking agents,” in Proceedings of the 2023 Conference on Empirical Methods in Natural Language Processing, EMNLP 2023, Singapore, December 6-10, 2023, H. Bouamor, J. Pino, and K. Bali, Eds. Association for Computational Linguistics, 2023, pp. 14 918–14 937.
[160]	X. Ma, X. Zhang, R. Pradeep, and J. Lin, “Zero-shot listwise document reranking with a large language model,” CoRR, vol. abs/2305.02156, 2023.
[161]	R. Tang, X. Zhang, X. Ma, J. Lin, and F. Ture, “Found in the middle: Permutation self-consistency improves listwise ranking in large language models,” CoRR, vol. abs/2310.07712, 2023.
[162]	Y. Chen, Q. Liu, Y. Zhang, W. Sun, D. Shi, J. Mao, and D. Yin, “Tourrank: Utilizing large language models for documents ranking with a tournament-inspired strategy,” CoRR, vol. abs/2406.11678, 2024.
[163]	A. Parry, S. MacAvaney, and D. Ganguly, “Top-down partitioning for efficient list-wise ranking,” CoRR, vol. abs/2405.14589, 2024.
[164]	Z. Qin, R. Jagerman, K. Hui, H. Zhuang, J. Wu, J. Shen, T. Liu, J. Liu, D. Metzler, X. Wang, and M. Bendersky, “Large language models are effective text rankers with pairwise ranking prompting,” CoRR, vol. abs/2306.17563, 2023.
[165]	S. Zhuang, H. Zhuang, B. Koopman, and G. Zuccon, “A setwise approach for effective and highly efficient zero-shot ranking with large language models,” CoRR, vol. abs/2310.09497, 2023.
[166]	J. Luo, X. Chen, B. He, and L. Sun, “Prp-graph: Pairwise ranking prompting to llms with graph aggregation for effective text re-ranking,” in ACL (1). Association for Computational Linguistics, 2024, pp. 5766–5776.
[167]	L. Yan, Z. Qin, H. Zhuang, R. Jagerman, X. Wang,
M. Bendersky, and H. Oosterhuis, “Consolidating ranking and relevance predictions of large language models through post-processing,” CoRR, vol. abs/2404.11791, 2024.
[168]	F. Ferraretto, T. Laitz, R. de Alencar Lotufo, and R. F. Nogueira, “Exaranker: Synthetic explanations improve neural rankers,” in Proceedings of the 46th International ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR 2023, Taipei, Taiwan, July 23-27, 2023, H. Chen, W. E. Duh, H. Huang, M. P. Kato, J. Mothe, and B. Poblete, Eds. ACM, 2023, pp. 2409–2414.
[169]	F. Ferraretto, T. Laitz, R. de Alencar Lotufo, and R. Nogueira, “Exaranker-open: Synthetic explanation for IR using open-source llms,” CoRR, vol. abs/2402.06334, 2024.
[170]	L. Boytsov, P. Patel, V. Sourabh, R. Nisar, S. Kundu, R. Ramanathan, and E. Nyberg, “Inpars-light: Costeffective unsupervised training of efficient rankers,” CoRR, vol. abs/2301.02998, 2023.
[171]	A. Askari, M. Aliannejadi, E. Kanoulas, and S. Ver-berne, “Generating synthetic documents for crossencoder re-rankers: A comparative study of chatgpt and human experts,” CoRR, vol. abs/2305.02320, 2023.
[172]	A. Askari, M. Aliannejadi, C. Meng, E. Kanoulas, and S. Verberne, “Expand, highlight, generate: Rl-driven document generation for passage reranking,” in EMNLP. Association for Computational Linguistics, 2023, pp. 10 087–10 099.
[173]	R. Pradeep, S. Sharifymoghaddam, and J. Lin, “Rankvicuna: Zero-shot listwise document reranking with open-source large language models,” CoRR, vol. abs/2309.15088, 2023.
[174]	——, “Rankzephyr: Effective and robust zeroshot listwise reranking is a breeze!” CoRR, vol. abs/2312.02724, 2023.
[175]	W. Sun, Z. Chen, X. Ma, L. Yan, S. Wang, P. Ren, Z. Chen, D. Yin, and Z. Ren, “Instruction distillation makes large language models efficient zero-shot rankers,” arXiv preprint arXiv:2311.01555, 2023.
[176]	C. J. C. Burges, T. Shaked, E. Renshaw, A. Lazier, M. Deeds, N. Hamilton, and G. N. Hullender, “Learning to rank using gradient descent,” in ICML, ser. ACM International Conference Proceeding Series, vol. 119. ACM, 2005, pp. 89–96.
[177]	J. A. Baktash and M. Dawodi, “Gpt-4: A review on advancements and opportunities in natural language processing,” arXiv preprint arXiv:2305.03195, 2023.
[178]	R. G. Reddy, J. Doo, Y. Xu, M. A. Sultan, D. Swain, A. Sil, and H. Ji, “FIRST: faster improved listwise reranking with single token decoding,” CoRR, vol. abs/2406.15657, 2024.
[179]	M. Rashid, J. Meem, Y. Dong, and V. Hristidis, “EcoRank: Budget-constrained text re-ranking using large language models,” in Findings of the Association for Computational Linguistics ACL 2024, L.-W. Ku, A. Martins, and V. Srikumar, Eds. Bangkok, Thailand and virtual meeting: Association for Computational Linguistics, Aug. 2024.
[180]	C. Meng, N. Arabzadeh, A. Askari, M. Aliannejadi, and M. de Rijke, “Ranked list truncation for large
language model-based re-ranking,” in SIGIR. ACM, 2024, pp. 141–151.
[181]	H. Wachsmuth, S. Syed, and B. Stein, “Retrieval of the best counterargument without prior topic knowledge,” in ACL (1).	Association for Computational
Linguistics, 2018, pp. 241–251.
[182]	K. Guu, K. Lee, Z. Tung, P. Pasupat, and M. Chang, “Retrieval augmented language model pre-training,” in Proceedings of the 37th International Conference on Machine Learning, ICML 2020, 13-18 July 2020, Virtual Event, ser. Proceedings of Machine Learning Research, vol. 119. PMLR, 2020, pp. 3929–3938.
[183]	P. S. H. Lewis, E. Perez, A. Piktus, F. Petroni, V. Karpukhin, N. Goyal, H. Ku¨ ttler, M. Lewis, W. Yih, T. Rockta¨ schel, S. Riedel, and D. Kiela, “Retrieval-augmented generation for knowledge-intensive NLP tasks,” in Advances in Neural Information Processing Systems 33: Annual Conference on Neural Information Processing Systems 2020, NeurIPS 2020, December 6-12, 2020, virtual, H. Larochelle, M. Ranzato, R. Hadsell, M. Balcan, and H. Lin, Eds., 2020.
[184]	W. Shi, S. Min, M. Yasunaga, M. Seo, R. James, M. Lewis, L. Zettlemoyer, and W. Yih, “REPLUG: retrieval-augmented black-box language models,” CoRR, vol. abs/2301.12652, 2023.
[185]	G. Izacard, P. S. H. Lewis, M. Lomeli, L. Hosseini, F. Petroni, T. Schick, J. Dwivedi-Yu, A. Joulin, S. Riedel, and E. Grave, “Atlas: Few-shot learning with retrieval augmented language models,” J. Mach. Learn. Res., vol. 24, pp. 251:1–251:43, 2023.
[186]	A. Lazaridou, E. Gribovskaya, W. Stokowiec, and N. Grigorev, “Internet-augmented language models through few-shot prompting for open-domain question answering,” CoRR, vol. abs/2203.05115, 2022.
[187]	H. He, H. Zhang, and D. Roth, “Rethinking with retrieval: Faithful large language model inference,” CoRR, vol. abs/2301.00303, 2023.
[188]	W. Yu, H. Zhang, X. Pan, K. Ma, H. Wang, and D. Yu, “Chain-of-note: Enhancing robustness in retrieval-augmented language models,” CoRR, vol. abs/2311.09210, 2023.
[189]	O. Ram, Y. Levine, I. Dalmedigos, D. Muhlgay, A. Shashua, K. Leyton-Brown, and Y. Shoham, “Incontext retrieval-augmented language models,” CoRR, vol. abs/2302.00083, 2023.
[190]	Z. Shao, Y. Gong, Y. Shen, M. Huang, N. Duan, and W. Chen, “Enhancing retrieval-augmented large language models with iterative retrieval-generation synergy,” in Findings of the Association for Computational Linguistics: EMNLP 2023, Singapore, December 6-10, 2023, H. Bouamor, J. Pino, and K. Bali, Eds. Association for Computational Linguistics, 2023, pp. 9248–9274.
[191]	H. Trivedi, N. Balasubramanian, T. Khot, and A. Sab-harwal, “Interleaving retrieval with chain-of-thought reasoning for knowledge-intensive multi-step questions,” in Proceedings of the 61st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), ACL 2023, Toronto, Canada, July 9-14, 2023, A. Rogers, J. L. Boyd-Graber, and N. Okazaki, Eds. Association for Computational Linguistics, 2023,
pp. 10 014–10 037.
[192]	Z. Jiang, F. F. Xu, L. Gao, Z. Sun, Q. Liu, J. Dwivedi-Yu, Y. Yang, J. Callan, and G. Neubig, “Active retrieval augmented generation,” in Proceedings of the 2023 Conference on Empirical Methods in Natural Language Processing, EMNLP 2023, Singapore, December 6-10, 2023, H. Bouamor, J. Pino, and K. Bali, Eds. Association for Computational Linguistics, 2023, pp. 7969–7992.
[193]	A. Asai, Z. Wu, Y. Wang, A. Sil, and H. Hajishirzi, “Self-rag: Learning to retrieve, generate, and critique through self-reflection,” CoRR, vol. abs/2310.11511, 2023.
[194]	J. Liu, J. Jin, Z. Wang, J. Cheng, Z. Dou, and J. Wen, “RETA-LLM: A retrieval-augmented large language model toolkit,” CoRR, vol. abs/2306.05212, 2023.
[195]	T. Vu, M. Iyyer, X. Wang, N. Constant, J. W. Wei, J. Wei, C. Tar, Y. Sung, D. Zhou, Q. V. Le, and T. Luong, “Freshllms: Refreshing large language models with search engine augmentation,” CoRR, vol. abs/2310.03214, 2023.
[196]	X. Lyu, S. Grafberger, S. Biegel, S. Wei, M. Cao, S. Schelter, and C. Zhang, “Improving retrieval-augmented large language models via data importance learning,” CoRR, vol. abs/2307.03027, 2023.
[197]	S. Wang, X. Yu, M. Wang, W. Chen, Y. Zhu, and Z. Dou, “Richrag: Crafting rich responses for multifaceted queries in retrieval-augmented generation,” CoRR, vol. abs/2406.12566, 2024.
[198]	Z. Jiang, X. Ma, and W. Chen, “Longrag: Enhancing retrieval-augmented generation with long-context llms,” CoRR, vol. abs/2406.15319, 2024.
[199]	T. Gao, H. Yen, J. Yu, and D. Chen, “Enabling large language models to generate text with citations,” in Proceedings of the 2023 Conference on Empirical Methods in Natural Language Processing, EMNLP 2023, Singapore, December 6-10, 2023, H. Bouamor, J. Pino, and K. Bali, Eds. Association for Computational Linguistics, 2023, pp. 6465–6488.
[200]	Z. Xu, Z. Liu, Y. Liu, C. Xiong, Y. Yan, S. Wang, S. Yu, Z. Liu, and G. Yu, “Activerag: Revealing the treasures of knowledge via active learning,” CoRR, vol. abs/2402.13547, 2024.
[201]	X. Liang, S. Niu, Z. Li, S. Zhang, S. Song, H. Wang, J. Yang, F. Xiong, B. Tang, and C. Xi, “Empowering large language models to set up a knowledge retrieval indexer via self-learning,” CoRR, vol. abs/2405.16933, 2024.
[202]	Y. Wang, R. Ren, J. Li, W. X. Zhao, J. Liu, and J. Wen, “REAR: A relevance-aware retrieval-augmented framework for open-domain question answering,” CoRR, vol. abs/2402.17497, 2024.
[203]	H. Luo, T. Zhang, Y. Chuang, Y. Gong, Y. Kim, X. Wu, H. Meng, and J. R. Glass, “Search augmented instruction learning,” in Findings of the Association for Computational Linguistics: EMNLP 2023, Singapore, December 6-10, 2023, H. Bouamor, J. Pino, and K. Bali, Eds. Association for Computational Linguistics, 2023, pp. 3717–3729.
[204]	X. V. Lin, X. Chen, M. Chen, W. Shi, M. Lomeli, R. James, P. Rodriguez, J. Kahn, G. Szilvasy, M. Lewis, L. Zettlemoyer, and S. Yih, “RA-DIT: retrieval-
augmented dual instruction tuning,” CoRR, vol. abs/2310.01352, 2023.
[205]	Z. Wei, W.-L. Chen, and Y. Meng, “Instructrag: Instructing retrieval-augmented generation with explicit denoising,” arXiv preprint arXiv:2406.13629, 2024.
[206]	S. Xu, L. Pang, M. Yu, F. Meng, H. Shen, X. Cheng, and J. Zhou, “Unsupervised information refinement training of large language models for retrieval-augmented generation,” in Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), ACL 2024, Bangkok, Thailand, August 11-16, 2024, L. Ku, A. Martins, and V. Srikumar, Eds. Association for Computational Linguistics, 2024, pp. 133–145.
[207]	Y. Zhu, Z. Huang, Z. Dou, and J. Wen, “One token can help! learning scalable and pluggable virtual tokens for retrieval-augmented large language models,” CoRR, vol. abs/2405.19670, 2024.
[208]	F. Ye, S. Li, Y. Zhang, and L. Chen, “Rˆ2ag: Incorporating retrieval information into retrieval augmented generation,” CoRR, vol. abs/2406.13249, 2024.
[209]	O. Yoran, T. Wolfson, O. Ram, and J. Berant, “Making retrieval-augmented language models robust to irrelevant context,” in The Twelfth International Conference on Learning Representations, ICLR 2024, Vienna, Austria, May 7-11, 2024. OpenReview.net, 2024.
[210]	F. Fang, Y. Bai, S. Ni, M. Yang, X. Chen, and R. Xu, “Enhancing noise robustness of retrieval-augmented language models with adaptive adversarial training,” in Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), ACL 2024, Bangkok, Thailand, August 11-16, 2024, L. Ku, A. Martins, and V. Srikumar, Eds. Association for Computational Linguistics, 2024, pp. 10 028–10 039.
[211]	J. Zhu, L. Yan, H. Shi, D. Yin, and L. Sha, “ATM: adversarial tuning multi-agent system makes a robust retrieval-augmented generator,” CoRR, vol. abs/2405.18111, 2024.
[212]	W. Yu, Z. Zhang, Z. Liang, M. Jiang, and A. Sabhar-wal, “Improving language models via plug-and-play retrieval feedback,” CoRR, vol. abs/2305.14002, 2023.
[213]	Z. Feng, X. Feng, D. Zhao, M. Yang, and B. Qin, “Retrieval-generation synergy augmented large language models,” CoRR, vol. abs/2310.05149, 2023.
[214]	D. Yang, J. Rao, K. Chen, X. Guo, Y. Zhang, J. Yang, and Y. Zhang, “IM-RAG: multi-round retrieval-augmented generation through learning inner monologues,” in Proceedings of the 47th International ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR 2024, Washington DC, USA, July 14-18, 2024, G. H. Yang, H. Wang, S. Han, C. Hauff, G. Zuccon, and Y. Zhang, Eds. ACM, 2024, pp. 730– 740.
[215]	Z. Shi, S. Zhang, W. Sun, S. Gao, P. Ren, Z. Chen, and Z. Ren, “Generate-then-ground in retrieval-augmented generation for multi-hop question answering,” in Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), ACL 2024, Bangkok, Thailand, August 11-16, 2024, L. Ku, A. Martins, and V. Srikumar, Eds. Association for Computational Linguistics, 2024, pp.
7339–7353.
[216]	S. Kadavath, T. Conerly, A. Askell, T. Henighan, D. Drain, E. Perez, N. Schiefer, Z. Hatfield-Dodds, N. DasSarma, E. Tran-Johnson, S. Johnston, S. E. Showk, A. Jones, N. Elhage, T. Hume, A. Chen, Y. Bai, S. Bowman, S. Fort, D. Ganguli, D. Hernandez, J. Jacobson, J. Kernion, S. Kravec, L. Lovitt, K. Ndousse, C. Olsson, S. Ringer, D. Amodei, T. Brown, J. Clark, N. Joseph, B. Mann, S. McCandlish, C. Olah, and J. Kaplan, “Language models (mostly) know what they know,” CoRR, vol. abs/2207.05221, 2022.
[217]	Z. Jiang, J. Araki, H. Ding, and G. Neubig, “How can we know When language models know? on the calibration of language models for question answering,” Trans. Assoc. Comput. Linguistics, vol. 9, pp. 962–977, 2021.
[218]	O. Press, M. Zhang, S. Min, L. Schmidt, N. A. Smith, and M. Lewis, “Measuring and narrowing the compositionality gap in language models,” in Findings of the Association for Computational Linguistics: EMNLP 2023, Singapore, December 6-10, 2023, H. Bouamor, J. Pino, and K. Bali, Eds. Association for Computational Linguistics, 2023, pp. 5687–5711.
[219]	O. Khattab, K. Santhanam, X. L. Li, D. Hall, P. Liang, C. Potts, and M. Zaharia, “Demonstrate-search-predict: Composing retrieval and language models for knowledge-intensive NLP,” CoRR, vol. abs/2212.14024, 2022.
[220]	M. Lee, S. An, and M. Kim, “Planrag: A plan-then-retrieval augmented generation for generative large language models as decision makers,” CoRR, vol. abs/2406.12430, 2024.
[221]	J. Wang, M. Chen, B. Hu, D. Yang, Z. Liu, Y. Shen, P. Wei, Z. Zhang, J. Gu, J. Zhou, J. Z. Pan, W. Zhang, and H. Chen, “Learning to plan for retrieval-augmented large language models from knowledge graphs,” CoRR, vol. abs/2406.14282, 2024.
[222]	O. Yoran, T. Wolfson, B. Bogin, U. Katz, D. Deutch, and J. Berant, “Answering questions by meta-reasoning over multiple chains of thought,” in Proceedings of the 2023 Conference on Empirical Methods in Natural Language Processing, EMNLP 2023, Singapore, December 6-10, 2023, H. Bouamor, J. Pino, and K. Bali, Eds. Association for Computational Linguistics, 2023, pp. 5942–5966.
[223]	M. A. Arefeen, B. Debnath, and S. Chakradhar, “Leancontext: Cost-efficient domain-specific question answering using llms,” CoRR, vol. abs/2309.00841, 2023.
[224]	F. Xu, W. Shi, and E. Choi, “RECOMP: improving retrieval-augmented lms with compression and selective augmentation,” CoRR, vol. abs/2310.04408, 2023.
[225]	Z. Wang, J. Araki, Z. Jiang, M. R. Parvez, and G. Neubig, “Learning to filter context for retrieval-augmented generation,” CoRR, vol. abs/2311.08377, 2023.
[226]	J. Liu, L. Li, T. Xiang, B. Wang, and Y. Qian, “TCRA-LLM: token compression retrieval augmented large language model for inference cost reduction,” in Findings of the Association for Computational Linguistics: EMNLP 2023, Singapore, December 6-10, 2023, H. Bouamor, J. Pino, and K. Bali, Eds. Association
for Computational Linguistics, 2023, pp. 9796–9810.
[227]	H. Yang, Z. Li, Y. Zhang, J. Wang, N. Cheng, M. Li, and J. Xiao, “PRCA: fitting black-box large language models for retrieval question answering via pluggable reward-driven contextual adapter,” in Proceedings of the 2023 Conference on Empirical Methods in Natural Language Processing, EMNLP 2023, Singapore, December 6-10, 2023, H. Bouamor, J. Pino, and K. Bali, Eds. Association for Computational Linguistics, 2023, pp. 5364–5375.
[228]	X. Cheng, X. Wang, X. Zhang, T. Ge, S. Chen, F. Wei, H. Zhang, and D. Zhao, “xrag: Extreme context compression for retrieval-augmented generation with one token,” CoRR, vol. abs/2405.13792, 2024.
[229]	J. Jin, Y. Zhu, Y. Zhou, and Z. Dou, “BIDER: bridging knowledge inconsistency for efficient retrieval-augmented llms via key supporting evidence,” in Findings of the Association for Computational Linguistics, ACL 2024, Bangkok, Thailand and virtual meeting, August 11-16, 2024, L. Ku, A. Martins, and V. Srikumar, Eds. Association for Computational Linguistics, 2024, pp. 750–761.
[230]	N. F. Liu, K. Lin, J. Hewitt, A. Paranjape, M. Bevilacqua, F. Petroni, and P. Liang, “Lost in the middle: How language models use long contexts,” CoRR, vol. abs/2307.03172, 2023.
[231]	R. Ren, Y. Wang, Y. Qu, W. X. Zhao, J. Liu, H. Tian, H. Wu, J. Wen, and H. Wang, “Investigating the factual knowledge boundary of large language models with retrieval augmentation,” CoRR, vol. abs/2307.11019, 2023.
[232]	Y. Liu, S. Yavuz, R. Meng, M. Moorthy, S. Joty, C. Xiong, and Y. Zhou, “Exploring the integration strategies of retriever and large language models,” CoRR, vol. abs/2308.12574, 2023.
[233]	R. Aksitov, C. Chang, D. Reitter, S. Shakeri, and Y. Sung, “Characterizing attribution and fluency tradeoffs for retrieval-augmented large language models,” CoRR, vol. abs/2302.05578, 2023.
[234]	A. Mallen, A. Asai, V. Zhong, R. Das, D. Khashabi, and H. Hajishirzi, “When not to trust language models: Investigating effectiveness of parametric and nonparametric memories,” in Proceedings of the 61st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), ACL 2023, Toronto, Canada, July 9-14, 2023, A. Rogers, J. L. Boyd-Graber, and N. Okazaki, Eds. Association for Computational Linguistics, 2023, pp. 9802–9822.
[235]	H. Ding, L. Pang, Z. Wei, H. Shen, and X. Cheng, “Retrieve only when it needs: Adaptive retrieval augmentation for hallucination mitigation in large language models,” CoRR, vol. abs/2402.10612, 2024.
[236]	H. Wang, B. Xue, B. Zhou, T. Zhang, C. Wang, G. Chen, H. Wang, and K. Wong, “Self-dc: When to retrieve and when to generate? self divide-and-conquer for compositional unknown questions,” CoRR, vol. abs/2402.13514, 2024.
[237]	S. Maekawa, H. Iso, S. Gurajada, and N. Bhutani, “Retrieval helps or hurts? A deeper dive into the efficacy of retrieval augmentation to language models,” CoRR, vol. abs/2402.13492, 2024.
[238]	S. Ni, K. Bi, J. Guo, and X. Cheng, “When do llms need retrieval augmentation? mitigating llms’ overconfidence helps retrieval augmentation,” CoRR, vol. abs/2402.11457, 2024.
[239]	Y. Wang, P. Li, M. Sun, and Y. Liu, “Self-knowledge guided retrieval augmentation for large language models,” in Findings of the Association for Computational Linguistics: EMNLP 2023, Singapore, December 6-10, 2023, H. Bouamor, J. Pino, and K. Bali, Eds. Association for Computational Linguistics, 2023, pp. 10 303–10 315.
[240]	J. Tan, Z. Dou, Y. Zhu, P. Guo, K. Fang, and J. Wen, “Small models, big insights: Leveraging slim proxy models to decide when and what to retrieve for llms,” in Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), ACL 2024, Bangkok, Thailand, August 1116, 2024, L. Ku, A. Martins, and V. Srikumar, Eds. Association for Computational Linguistics, 2024, pp. 4420–4436.
[241]	Z. Jin, P. Cao, Y. Chen, K. Liu, X. Jiang, J. Xu, Q. Li, and J. Zhao, “Tug-of-war between knowledge: Exploring and resolving knowledge conflicts in retrieval-augmented language models,” in Proceedings of the 2024 Joint International Conference on Computational Linguistics, Language Resources and Evaluation, LREC/COLING 2024, 20-25 May, 2024, Torino, Italy, N. Calzolari, M. Kan, V. Hoste, A. Lenci, S. Sakti, and N. Xue, Eds. ELRA and ICCL, 2024, pp. 16 867–16 878.
[242]	S. Cho, S. Jeong, J. Seo, T. Hwang, and J. C. Park, “Typos that broke the rag’s back: Genetic attack on RAG pipeline by simulating documents in the wild via low-level perturbations,” CoRR, vol. abs/2404.13948, 2024.
[243]	J. Xue, M. Zheng, Y. Hu, F. Liu, X. Chen, and Q. Lou, “Badrag: Identifying vulnerabilities in retrieval augmented generation of large language models,” CoRR, vol. abs/2406.00083, 2024.
[244]	H. Chaudhari, G. Severi, J. Abascal, M. Jagielski, C. A. Choquette-Choo, M. Nasr, C. Nita-Rotaru, and A. Oprea, “Phantom: General trigger attacks on retrieval augmented language generation,” CoRR, vol. abs/2405.20485, 2024.
[245]	S. Wang, J. Liu, S. Song, J. Cheng, Y. Fu, P. Guo, K. Fang, Y. Zhu, and Z. Dou, “Domainrag: A chinese benchmark for evaluating domain-specific retrieval-augmented generation,” CoRR, vol. abs/2406.05654, 2024.
[246]	F. Cuconasu, G. Trappolini, N. Tonellotto, and F. Silvestri, “A tale of trust and accuracy: Base vs. instruct llms in RAG systems,” CoRR, vol. abs/2406.14972, 2024.
[247]	Y. Wang, X. Ma, and W. Chen, “Augmenting blackbox llms with medical textbooks for clinical question answering,” CoRR, vol. abs/2309.02233, 2023.
[248]	S. Munikoti, A. Acharya, S. Wagle, and S. Horawalavithana, “ATLANTIC: structure-aware retrieval-augmented language model for interdisciplinary science,” CoRR, vol. abs/2311.12289, 2023.
[249]	X. Li, E. Nie, and S. Liang, “Crosslingual retrieval augmented in-context learning for bangla,” CoRR, vol.
abs/2311.00587, 2023.
[250]	A. Lozano, S. L. Fleming, C. Chiang, and N. Shah, “Clinfo.ai: An open-source retrieval-augmented large language model system for answering medical questions using scientific literature,” CoRR, vol. abs/2310.16146, 2023.
[251]	B. Zhang, H. Yang, T. Zhou, A. Babar, and X. Liu, “Enhancing financial sentiment analysis via retrieval augmented large language models,” in 4th ACM International Conference on AI in Finance, ICAIF 2023, Brooklyn, NY, USA, November 27-29, 2023. ACM, 2023, pp. 349–356.
[252]	A. Louis, G. van Dijck, and G. Spanakis, “Interpretable long-form legal question answering with retrieval-augmented large language models,” CoRR, vol. abs/2309.17050, 2023.
[253]	Z. Wang, S. X. Teo, J. Ouyang, Y. Xu, and W. Shi, “M-RAG: reinforcing large language model performance through retrieval-augmented generation with multiple partitions,” in Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), ACL 2024, Bangkok, Thailand, August 11-16, 2024, L. Ku, A. Martins, and V. Srikumar, Eds. Association for Computational Linguistics, 2024, pp. 1966–1978.
[254]	G. Zyskind, T. South, and A. Pentland, “Don’t forget private retrieval: distributed private similarity search for large language models,” CoRR, vol. abs/2311.12955, 2023.
[255]	W. Jiang, M. Zeller, R. Waleffe, T. Hoefler, and G. Alonso, “Chameleon: a heterogeneous and disaggregated accelerator system for retrieval-augmented language models,” CoRR, vol. abs/2310.09949, 2023.
[256]	Y. Hoshi, D. Miyashita, Y. Ng, K. Tatsuno, Y. Morioka, O. Torii, and J. Deguchi, “Ralle: A framework for developing and evaluating retrieval-augmented large language models,” in Proceedings of the 2023 Conference on Empirical Methods in Natural Language Processing, EMNLP 2023 - System Demonstrations, Singapore, December 6-10, 2023, Y. Feng and E. Lefever, Eds. Association for Computational Linguistics, 2023, pp. 52–69.
[257]	J. Jin, Y. Zhu, X. Yang, C. Zhang, and Z. Dou, “Flashrag: A modular toolkit for efficient retrieval-augmented generation research,”	CoRR, vol.
abs/2405.13576, 2024.
[258]	R. Thoppilan, D. D. Freitas, J. Hall, N. Shazeer, A. Kulshreshtha, H. Cheng, A. Jin, T. Bos, L. Baker, Y. Du, Y. Li, H. Lee, H. S. Zheng, A. Ghafouri, M. Menegali, Y. Huang, M. Krikun, D. Lepikhin, J. Qin, D. Chen, Y. Xu, Z. Chen, A. Roberts, M. Bosma, Y. Zhou, C. Chang, I. Krivokon, W. Rusch, M. Pickett, K. S. Meier-Hellstern, M. R. Morris, T. Doshi, R. D. Santos, T. Duke, J. Soraker, B. Zevenbergen, V. Prabhakaran, M. Diaz, B. Hutchinson, K. Olson, A. Molina, E. Hoffman-John, J. Lee, L. Aroyo, R. Ra-jakumar, A. Butryna, M. Lamm, V. Kuzmina, J. Fenton, A. Cohen, R. Bernstein, R. Kurzweil, B. A. y Arcas, C. Cui, M. Croak, E. H. Chi, and Q. Le, “Lamda: Language models for dialog applications,” CoRR, vol. abs/2201.08239, 2022.
[259]	K. Shuster, M. Komeili, L. Adolphs, S. Roller,
A. Szlam, and J. Weston, “Language models that seek for knowledge: Modular search & generation for dialogue and prompt completion,” in Findings of the Association for Computational Linguistics: EMNLP 2022, Abu Dhabi, United Arab Emirates, December 7-11, 2022, Y. Goldberg, Z. Kozareva, and Y. Zhang, Eds. Association for Computational Linguistics, 2022, pp. 373–393.
[260]	X. Liu, H. Lai, H. Yu, Y. Xu, A. Zeng, Z. Du, P. Zhang, Y. Dong, and J. Tang, “Webglm: Towards an efficient web-enhanced question answering system with human preferences,” in Proceedings of the 29th ACM SIGKDD Conference on Knowledge Discovery and Data Mining, KDD 2023, Long Beach, CA, USA, August 6-10, 2023, A. K. Singh, Y. Sun, L. Akoglu, D. Gunopulos, X. Yan, R. Kumar, F. Ozcan, and J. Ye, Eds. ACM, 2023, pp. 4549–4560.
[261]	I. Gur, H. Furuta, A. Huang, M. Safdari, Y. Matsuo, D. Eck, and A. Faust, “A real-world webagent with planning, long context understanding, and program synthesis,” CoRR, vol. abs/2307.12856, 2023.
[262]	J. Menick, M. Trebacz, V. Mikulik, J. Aslanides, H. F. Song, M. J. Chadwick, M. Glaese, S. Young, L. Campbell-Gillingham, G. Irving, and N. McAleese, “Teaching language models to support answers with verified quotes,” CoRR, vol. abs/2203.11147, 2022.
[263]	X. Shi, J. Liu, Y. Liu, Q. Cheng, and W. Lu, “Know where to go: Make LLM a relevant, responsible, and trustworthy searcher,” CoRR, vol. abs/2310.12443, 2023.
[264]	P. Gong, J. Li, and J. Mao, “Cosearchagent: A lightweight collaborative search agent with large language models,” in Proceedings of the 47th International ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR 2024, Washington DC, USA, July 14-18, 2024, G. H. Yang, H. Wang, S. Han, C. Hauff, G. Zuccon, and Y. Zhang, Eds. ACM, 2024, pp. 2729–2733.
[265]	Y. Qin, Z. Cai, D. Jin, L. Yan, S. Liang, K. Zhu, Y. Lin, X. Han, N. Ding, H. Wang, R. Xie, F. Qi, Z. Liu, M. Sun, and J. Zhou, “Webcpm: Interactive web search for chinese long-form question answering,” in Proceedings of the 61st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), ACL 2023, Toronto, Canada, July 9-14, 2023, A. Rogers, J. L. Boyd-Graber, and N. Okazaki, Eds. Association for Computational Linguistics, 2023, pp. 8968–8988.
[266]	R. Lo, A. Sridhar, F. F. Xu, H. Zhu, and S. Zhou, “Hierarchical prompting assists large language model on web navigation,” in Findings of the Association for Computational Linguistics: EMNLP 2023, Singapore, December 6-10, 2023, H. Bouamor, J. Pino, and K. Bali, Eds. Association for Computational Linguistics, 2023, pp. 10 217–10 244.
[267]	R. Zhou, Y. Yang, M. Wen, Y. Wen, W. Wang, C. Xi, G. Xu, Y. Yu, and W. Zhang, “TRAD: enhancing LLM agents with step-wise thought retrieval and aligned decision,” in Proceedings of the 47th International ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR 2024, Washington DC, USA, July 14-18, 2024, G. H. Yang, H. Wang, S. Han, C. Hauff,
G. Zuccon, and Y. Zhang, Eds. ACM, 2024, pp. 3–13. [268] H. Lai, X. Liu, I. L. Iong, S. Yao, Y. Chen, P. Shen, H. Yu, H. Zhang, X. Zhang, Y. Dong, and J. Tang, “Autowebglm: Bootstrap and reinforce A large language model-based web navigating agent,” CoRR, vol. abs/2404.03648, 2024.
[269]	H. Pan, Z. Zhai, H. Yuan, Y. Lv, R. Fu, M. Liu, Z. Wang, and B. Qin, “Kwaiagents: Generalized informationseeking agent system with large language models,” CoRR, vol. abs/2312.04889, 2023.
[270]	H. He, W. Yao, K. Ma, W. Yu, Y. Dai, H. Zhang, Z. Lan, and D. Yu, “Webvoyager: Building an end-to-end web agent with large multimodal models,” in Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), ACL 2024, Bangkok, Thailand, August 11-16, 2024, L. Ku, A. Martins, and V. Srikumar, Eds. Association for Computational Linguistics, 2024, pp. 6864–6890.
[271]	W. Chen, Z. You, R. Li, Y. Guan, C. Qian, C. Zhao, C. Yang, R. Xie, Z. Liu, and M. Sun, “Internet of agents: Weaving a web of heterogeneous agents for collaborative intelligence,” CoRR, vol. abs/2407.07061, 2024.
[272]	T. Abuelsaad, D. Akkil, P. Dey, A. Jagmohan, A. Vem-paty, and R. Kokku, “Agent-e: From autonomous web navigation to foundational design principles in agen-tic systems,” CoRR, vol. abs/2407.13032, 2024.
[273]	Z. Chen, K. Liu, Q. Wang, J. Liu, W. Zhang, K. Chen, and F. Zhao, “Mindsearch: Mimicking human minds elicits deep AI searcher,” CoRR, vol. abs/2407.20183, 2024.
[274]	X. Deng, Y. Gu, B. Zheng, S. Chen, S. Stevens, B. Wang, H. Sun, and Y. Su, “Mind2web: Towards a generalist agent for the web,” CoRR, vol. abs/2306.06070, 2023.
[275]	S. Yao, H. Chen, J. Yang, and K. Narasimhan, “Webshop: Towards scalable real-world web interaction with grounded language agents,” in NeurIPS, 2022.
[276]	S. Zhou, F. F. Xu, H. Zhu, X. Zhou, R. Lo, A. Sridhar, X. Cheng, Y. Bisk, D. Fried, U. Alon, and G. Neubig, “Webarena: A realistic web environment for building autonomous agents,” CoRR, vol. abs/2307.13854, 2023.
[277]	Y. Pan, D. Kong, S. Zhou, C. Cui, Y. Leng, B. Jiang, H. Liu, Y. Shang, S. Zhou, T. Wu, and Z. Wu, “Webcanvas: Benchmarking web agents in online environments,” CoRR, vol. abs/2406.12373, 2024.
[278]	S. MacAvaney, C. Macdonald, R. Murray-Smith, and I. Ounis, “Intent5: Search result diversification using causal language models,” CoRR, vol. abs/2108.04026, 2021.
[279]	OpenAI, “GPT-4 technical report,” CoRR, vol. abs/2303.08774, 2023.
[280]	N. Craswell, “Mean reciprocal rank,” in Encyclopedia of Database Systems, L. Liu and M. T. Ozsu, Eds. Springer US, 2009, p. 1703.
[281]	K. Ja¨ rvelin and J. Keka¨ la¨ inen, “Cumulated gain-based evaluation of IR techniques,” ACM Trans. Inf. Syst., vol. 20, no. 4, pp. 422–446, 2002.
[282]	K. Papineni, S. Roukos, T. Ward, and W. Zhu, “Bleu: a method for automatic evaluation of machine translation,” in Proceedings of the 40th Annual Meeting of the Association for Computational Linguistics, July 6-12, 2002, Philadelphia, PA, USA. ACL, 2002, pp. 311–318.
[283]	C.-Y. Lin, “ROUGE: A package for automatic evaluation of summaries,” in Text Summarization Branches Out. Barcelona, Spain: Association for Computational Linguistics, Jul. 2004, pp. 74–81.
[284]	P. Manakul, A. Liusie, and M. J. F. Gales, “Selfcheck-gpt: Zero-resource black-box hallucination detection for generative large language models,” CoRR, vol. abs/2303.08896, 2023.
[285]	H. Qian, Y. Zhu, Z. Dou, H. Gu, X. Zhang, Z. Liu, R. Lai, Z. Cao, J. Nie, and J. Wen, “Webbrain: Learning to generate factually correct articles for queries by grounding on large web corpus,” CoRR, vol. abs/2304.04358, 2023.
[286]	J. Li, X. Cheng, W. X. Zhao, J. Nie, and J. Wen, “Halueval: A large-scale hallucination evaluation benchmark for large language models,” CoRR, vol. abs/2305.11747, 2023.
[287]	L. Chen, Y. Deng, Y. Bian, Z. Qin, B. Wu, T. Chua, and K. Wong, “Beyond factuality: A comprehensive evaluation of large language models as knowledge generators,” in Proceedings of the 2023 Conference on Empirical Methods in Natural Language Processing, EMNLP 2023, Singapore, December 6-10, 2023, H. Bouamor, J. Pino, and K. Bali, Eds. Association for Computational Linguistics, 2023, pp. 6325–6341.
[288]	S. Xu, D. Hou, L. Pang, J. Deng, J. Xu, H. Shen, and X. Cheng, “Ai-generated images introduce invisible relevance bias to text-image retrieval,” CoRR, vol. abs/2311.14084, 2023.
[289]	S. Dai, Y. Zhou, L. Pang, W. Liu, X. Hu, Y. Liu, X. Zhang, and J. Xu, “Llms may dominate information access: Neural retrievers are biased towards llm-generated texts,” CoRR, vol. abs/2310.20501, 2023.
[290]	J. S. Park, J. C. O’Brien, C. J. Cai, M. R. Morris, P. Liang, and M. S. Bernstein, “Generative agents: Interactive simulacra of human behavior,” CoRR, vol. abs/2304.03442, 2023.